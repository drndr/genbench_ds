{"input": "python multiprocessing pool join time out [SEP] def terminate_pool(self):         \"\"\"Terminate and close the multiprocessing pool if necessary.\"\"\"          if self.pool is not None:             self.pool.terminate()             self.pool.join()             del(self.pool)             self.pool = None", "target": 1, "target_options": [0, 1]}
{"input": "appending data into data frame python [SEP] def QA_util_to_json_from_pandas(data):     \"\"\"需要对于datetime 和date 进行转换, 以免直接被变成了时间戳\"\"\"     if 'datetime' in data.columns:         data.datetime = data.datetime.apply(str)     if 'date' in data.columns:         data.date = data.date.apply(str)     return json.loads(data.to_json(orient='records'))", "target": 1, "target_options": [0, 1]}
{"input": "python switch test if variable exists [SEP] def has_attribute(module_name, attribute_name):     \"\"\"Is this attribute present?\"\"\"     init_file = '%s/__init__.py' % module_name     return any(         [attribute_name in init_line for init_line in open(init_file).readlines()]     )", "target": 1, "target_options": [0, 1]}
{"input": "python format float as tring [SEP] def realized_pnl(self):         \"\"\"         [float] 平仓盈亏         \"\"\"         return sum(position.realized_pnl for position in six.itervalues(self._positions))", "target": 1, "target_options": [0, 1]}
{"input": "filter number in string python [SEP] def valid_substitution(strlen, index):     \"\"\"     skip performing substitutions that are outside the bounds of the string     \"\"\"     values = index[0]     return all([strlen > i for i in values])", "target": 1, "target_options": [0, 1]}
{"input": "command prompt input python [SEP] def read_stdin():     \"\"\" Read text from stdin, and print a helpful message for ttys. \"\"\"     if sys.stdin.isatty() and sys.stdout.isatty():         print('\\nReading from stdin until end of file (Ctrl + D)...')      return sys.stdin.read()", "target": 1, "target_options": [0, 1]}
{"input": "store dir subdir to list of folder name python [SEP] def get_files(dir_name):     \"\"\"Simple directory walker\"\"\"     return [(os.path.join('.', d), [os.path.join(d, f) for f in files]) for d, _, files in os.walk(dir_name)]", "target": 1, "target_options": [0, 1]}
{"input": "python excel add values to column [SEP] def addValue(self, _, value):     \"\"\"Adds a value from the given source.\"\"\"     self.total += self._dataFormat.getValue(value)", "target": 1, "target_options": [0, 1]}
{"input": "can you remove letters in strings in python [SEP] def strip_accents(s):     \"\"\"     Strip accents to prepare for slugification.     \"\"\"     nfkd = unicodedata.normalize('NFKD', unicode(s))     return u''.join(ch for ch in nfkd if not unicodedata.combining(ch))", "target": 1, "target_options": [0, 1]}
{"input": "python test if variable is not null [SEP] def is_all_field_none(self):         \"\"\"         :rtype: bool         \"\"\"          if self._type_ is not None:             return False          if self._value is not None:             return False          if self._name is not None:             return False          return True", "target": 1, "target_options": [0, 1]}
{"input": "python3 switch window focus linux [SEP] def inFocus(self):         \"\"\"Set GUI on-top flag\"\"\"         previous_flags = self.window.flags()         self.window.setFlags(previous_flags |                              QtCore.Qt.WindowStaysOnTopHint)", "target": 1, "target_options": [0, 1]}
{"input": "python remove last 3 elements from list [SEP] def indicate_last(items):     \"\"\"     iterate through list and indicate which item is the last, intended to     assist tree displays of hierarchical content.      :return: yielding (<bool>, <item>) where bool is True only on last entry     :rtype: generator     \"\"\"     last_index = len(items) - 1     for (i, item) in enumerate(items):         yield (i == last_index, item)", "target": 1, "target_options": [0, 1]}
{"input": "return the value of the diaganol matrix python [SEP] def get_magnitude_squared(self):         \"\"\"Returns the square of the magnitude of this vector.\"\"\"         return self.x*self.x + self.y*self.y", "target": 1, "target_options": [0, 1]}
{"input": "turn list of string of numbers to in python [SEP] def try_cast_int(s):     \"\"\"(str) -> int     All the digits in a given string are concatenated and converted into a single number.     \"\"\"     try:         temp = re.findall('\\d', str(s))         temp = ''.join(temp)         return int(temp)     except:         return s", "target": 1, "target_options": [0, 1]}
{"input": "get index if there are repeats python [SEP] def unduplicate_field_names(field_names):     \"\"\"Append a number to duplicate field names to make them unique. \"\"\"     res = []     for k in field_names:         if k in res:             i = 1             while k + '_' + str(i) in res:                 i += 1             k += '_' + str(i)         res.append(k)     return res", "target": 1, "target_options": [0, 1]}
{"input": "print matrix object python [SEP] def get_object_info(self):         \"\"\"         Returns object info in following form <module.class object at address>         \"\"\"         objectinfo = str(self.__class__).replace(\">\", \"\")         objectinfo = objectinfo.replace(\"class \", \"\")         objectinfo = objectinfo.replace(\"'\", \"\")         objectinfo += \" object at 0x%x>\" % id(self)         return objectinfo", "target": 1, "target_options": [0, 1]}
{"input": "how to open a text file on python [SEP] def get_file_string(filepath):     \"\"\"Get string from file.\"\"\"     with open(os.path.abspath(filepath)) as f:         return f.read()", "target": 1, "target_options": [0, 1]}
{"input": "time to timedelta python [SEP] def elapsed_time_from(start_time):     \"\"\"calculate time delta from latched time and current time\"\"\"     time_then = make_time(start_time)     time_now = datetime.utcnow().replace(microsecond=0)     if time_then is None:         return     delta_t = time_now - time_then     return delta_t", "target": 1, "target_options": [0, 1]}
{"input": "how do i repeat a string in python [SEP] def insert_slash(string, every=2):     \"\"\"insert_slash insert / every 2 char\"\"\"     return os.path.join(string[i:i+every] for i in xrange(0, len(string), every))", "target": 1, "target_options": [0, 1]}
{"input": "how to transform an object to integer in python [SEP] def data_format_value(self):         \"\"\"         :return: The data type of the data component as integer value.         \"\"\"         try:             if self._part:                 value = self._part.data_format             else:                 value = self._buffer.pixel_format         except InvalidParameterException:             value = self._node_map.PixelFormat.value         return value", "target": 1, "target_options": [0, 1]}
{"input": "how to draw a rectangle ina plane opengl python [SEP] def draw(self, mode=\"triangles\"):         \"\"\" Draw collection \"\"\"          gl.glDepthMask(0)         Collection.draw(self, mode)         gl.glDepthMask(1)", "target": 1, "target_options": [0, 1]}
{"input": "check whether a file exists on s3 full path using python [SEP] def check_for_key(self, key, bucket_name=None):         \"\"\"         Checks if a key exists in a bucket          :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which the file is stored         :type bucket_name: str         \"\"\"         if not bucket_name:             (bucket_name, key) = self.parse_s3_url(key)          try:             self.get_conn().head_object(Bucket=bucket_name, Key=key)             return True         except ClientError as e:             self.log.info(e.response[\"Error\"][\"Message\"])             return False", "target": 1, "target_options": [0, 1]}
{"input": "python cycle through elements in list [SEP] def flatten_list(l):     \"\"\" Nested lists to single-level list, does not split strings\"\"\"     return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))", "target": 1, "target_options": [0, 1]}
{"input": "python 3 iterate sort dictionary [SEP] def csort(objs, key):     \"\"\"Order-preserving sorting function.\"\"\"     idxs = dict((obj, i) for (i, obj) in enumerate(objs))     return sorted(objs, key=lambda obj: (key(obj), idxs[obj]))", "target": 1, "target_options": [0, 1]}
{"input": "python stringmethods to check exact equality [SEP] def hard_equals(a, b):     \"\"\"Implements the '===' operator.\"\"\"     if type(a) != type(b):         return False     return a == b", "target": 1, "target_options": [0, 1]}
{"input": "python git get latest commit [SEP] def latest_commit(self) -> git.Commit:         \"\"\"         :return: latest commit         :rtype: git.Commit object         \"\"\"         latest_commit: git.Commit = self.repo.head.commit         LOGGER.debug('latest commit: %s', latest_commit)         return latest_commit", "target": 1, "target_options": [0, 1]}
{"input": "filter out nans in python data frame [SEP] def dropna(self, subset=None):         \"\"\"Remove missing values according to Baloo's convention.          Parameters         ----------         subset : list of str, optional             Which columns to check for missing values in.          Returns         -------         DataFrame             DataFrame with no null values in columns.          \"\"\"         subset = check_and_obtain_subset_columns(subset, self)         not_nas = [v.notna() for v in self[subset]._iter()]         and_filter = reduce(lambda x, y: x & y, not_nas)          return self[and_filter]", "target": 1, "target_options": [0, 1]}
{"input": "how to write float32 in python [SEP] def write_float(self, f):         \"\"\"         Writes a 4 byte float to the stream.          @param f: 4 byte float         @type f: C{float}         @raise TypeError: Unexpected type for float C{f}.         \"\"\"         if type(f) is not float:             raise TypeError('expected a float (got:%r)' % (type(f),))          self.write(struct.pack(\"%sf\" % self.endian, f))", "target": 1, "target_options": [0, 1]}
{"input": "python get item in list with most [SEP] def _most_common(iterable):     \"\"\"Returns the most common element in `iterable`.\"\"\"     data = Counter(iterable)     return max(data, key=data.__getitem__)", "target": 1, "target_options": [0, 1]}
{"input": "sort by column and value condition python [SEP] def sort_data(data, cols):     \"\"\"Sort `data` rows and order columns\"\"\"     return data.sort_values(cols)[cols + ['value']].reset_index(drop=True)", "target": 1, "target_options": [0, 1]}
{"input": "how to return several values without using tuple in python [SEP] def as_tuple(self, value):         \"\"\"Utility function which converts lists to tuples.\"\"\"         if isinstance(value, list):             value = tuple(value)         return value", "target": 1, "target_options": [0, 1]}
{"input": "python get last n rows from list [SEP] def searchlast(self,n=10):         \"\"\"Return the last n results (or possibly less if not found). Note that the last results are not necessarily the best ones! Depending on the search type.\"\"\"                     solutions = deque([], n)         for solution in self:             solutions.append(solution)         return solutions", "target": 1, "target_options": [0, 1]}
{"input": "count characters length python [SEP] def array_dim(arr):     \"\"\"Return the size of a multidimansional array.     \"\"\"     dim = []     while True:         try:             dim.append(len(arr))             arr = arr[0]         except TypeError:             return dim", "target": 1, "target_options": [0, 1]}
{"input": "check list in a string python [SEP] def chk_enum_arg(s):     \"\"\"Checks if the string `s` is a valid enum string.      Return True or False.\"\"\"      if len(s) == 0 or s[0].isspace() or s[-1].isspace():         return False     else:         return True", "target": 1, "target_options": [0, 1]}
{"input": "stackoverflow python how to read text file and print without \\n [SEP] def lint_file(in_file, out_file=None):     \"\"\"Helps remove extraneous whitespace from the lines of a file      :param file in_file: A readable file or file-like     :param file out_file: A writable file or file-like     \"\"\"     for line in in_file:         print(line.strip(), file=out_file)", "target": 1, "target_options": [0, 1]}
{"input": "python math to slice an integer [SEP] def _fix_index(self, index):         \"\"\"         :param slice index:         \"\"\"         stop, start = index.stop, index.start         if start is None:             start = 0         if stop is None:             stop = len(self)         return start, stop", "target": 1, "target_options": [0, 1]}
{"input": "python functions that compute the l1 and l2 distances between x and y [SEP] def difference(ydata1, ydata2):     \"\"\"      Returns the number you should add to ydata1 to make it line up with ydata2      \"\"\"      y1 = _n.array(ydata1)     y2 = _n.array(ydata2)      return(sum(y2-y1)/len(ydata1))", "target": 1, "target_options": [0, 1]}
{"input": "python how to make string isdigit print out the digits [SEP] def is_dec(ip):     \"\"\"Return true if the IP address is in decimal notation.\"\"\"     try:         dec = int(str(ip))     except ValueError:         return False     if dec > 4294967295 or dec < 0:         return False     return True", "target": 1, "target_options": [0, 1]}
{"input": "how to delete text values python [SEP] def remove_bad(string):     \"\"\"     remove problem characters from string     \"\"\"     remove = [':', ',', '(', ')', ' ', '|', ';', '\\'']     for c in remove:         string = string.replace(c, '_')     return string", "target": 1, "target_options": [0, 1]}
{"input": "how to access element of matrix python [SEP] def lengths( self ):         \"\"\"         The cell lengths.          Args:             None          Returns:             (np.array(a,b,c)): The cell lengths.         \"\"\"         return( np.array( [ math.sqrt( sum( row**2 ) ) for row in self.matrix ] ) )", "target": 1, "target_options": [0, 1]}
{"input": "python check viarable type [SEP] def isreal(obj):     \"\"\"     Test if the argument is a real number (float or integer).      :param obj: Object     :type  obj: any      :rtype: boolean     \"\"\"     return (         (obj is not None)         and (not isinstance(obj, bool))         and isinstance(obj, (int, float))     )", "target": 1, "target_options": [0, 1]}
{"input": "appending data into data frame python [SEP] def to_dataframe(products):         \"\"\"Return the products from a query response as a Pandas DataFrame         with the values in their appropriate Python types.         \"\"\"         try:             import pandas as pd         except ImportError:             raise ImportError(\"to_dataframe requires the optional dependency Pandas.\")          return pd.DataFrame.from_dict(products, orient='index')", "target": 1, "target_options": [0, 1]}
{"input": "python creating an array of fixed size [SEP] def A(*a):     \"\"\"convert iterable object into numpy array\"\"\"     return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]", "target": 1, "target_options": [0, 1]}
{"input": "python string match variable [SEP] def get_value_matched_by_regex(field_name, regex_matches, string):     \"\"\"Ensure value stored in regex group exists.\"\"\"     try:         value = regex_matches.group(field_name)         if value is not None:             return value     except IndexError:         pass      raise MissingFieldError(string, field_name)", "target": 1, "target_options": [0, 1]}
{"input": "python split with any of multiple delimitrs [SEP] def make_regex(separator):     \"\"\"Utility function to create regexp for matching escaped separators     in strings.      \"\"\"     return re.compile(r'(?:' + re.escape(separator) + r')?((?:[^' +                       re.escape(separator) + r'\\\\]|\\\\.)+)')", "target": 1, "target_options": [0, 1]}
{"input": "python split on any whitespace [SEP] def clean(s):   \"\"\"Removes trailing whitespace on each line.\"\"\"   lines = [l.rstrip() for l in s.split('\\n')]   return '\\n'.join(lines)", "target": 1, "target_options": [0, 1]}
{"input": "python and replace multerble charaters in string [SEP] def dashrepl(value):     \"\"\"     Replace any non-word characters with a dash.     \"\"\"     patt = re.compile(r'\\W', re.UNICODE)     return re.sub(patt, '-', value)", "target": 1, "target_options": [0, 1]}
{"input": "python, how to put a variable in a string [SEP] def full_name(self):         \"\"\"         You can get full name of user.          :return: str         \"\"\"         full_name = self.first_name         if self.last_name:             full_name += ' ' + self.last_name         return full_name", "target": 1, "target_options": [0, 1]}
{"input": "bring out array from dictionary python [SEP] def C_dict2array(C):     \"\"\"Convert an OrderedDict containing C values to a 1D array.\"\"\"     return np.hstack([np.asarray(C[k]).ravel() for k in C_keys])", "target": 1, "target_options": [0, 1]}
{"input": "bring out array from dictionary python [SEP] def convert_array(array):     \"\"\"     Converts an ARRAY string stored in the database back into a Numpy array.      Parameters     ----------     array: ARRAY         The array object to be converted back into a Numpy array.      Returns     -------     array             The converted Numpy array.      \"\"\"     out = io.BytesIO(array)     out.seek(0)     return np.load(out)", "target": 1, "target_options": [0, 1]}
{"input": "python get all index string match [SEP] def regex_matches_to_indexed_words(matches):     \"\"\"Transforms tokensregex and semgrex matches to indexed words.     :param matches: unprocessed regex matches     :return: flat array of indexed words     \"\"\"     words = [dict(v, **dict([('sentence', i)]))              for i, s in enumerate(matches['sentences'])              for k, v in s.items() if k != 'length']     return words", "target": 1, "target_options": [0, 1]}
{"input": "python print a character by ascii code [SEP] def _escape_char(c, escape_char=ESCAPE_CHAR):     \"\"\"Escape a single character\"\"\"     buf = []     for byte in c.encode('utf8'):         buf.append(escape_char)         buf.append('%X' % _ord(byte))     return ''.join(buf)", "target": 1, "target_options": [0, 1]}
{"input": "how to count uniques python series [SEP] def remove_dups(seq):     \"\"\"remove duplicates from a sequence, preserving order\"\"\"     seen = set()     seen_add = seen.add     return [x for x in seq if not (x in seen or seen_add(x))]", "target": 1, "target_options": [0, 1]}
{"input": "put two lists together python as dictionary [SEP] def list2dict(lst):     \"\"\"Takes a list of (key,value) pairs and turns it into a dict.\"\"\"      dic = {}     for k,v in lst: dic[k] = v     return dic", "target": 1, "target_options": [0, 1]}
{"input": "finding the median of an arrray in python [SEP] def fast_median(a):     \"\"\"Fast median operation for masked array using 50th-percentile     \"\"\"     a = checkma(a)     #return scoreatpercentile(a.compressed(), 50)     if a.count() > 0:         out = np.percentile(a.compressed(), 50)     else:         out = np.ma.masked     return out", "target": 1, "target_options": [0, 1]}
{"input": "how to revert a timestamp back to a string in python [SEP] def ms_to_datetime(ms):     \"\"\"     Converts a millisecond accuracy timestamp to a datetime     \"\"\"     dt = datetime.datetime.utcfromtimestamp(ms / 1000)     return dt.replace(microsecond=(ms % 1000) * 1000).replace(tzinfo=pytz.utc)", "target": 1, "target_options": [0, 1]}
{"input": "python file replace suffix [SEP] def add_suffix(filename, suffix):         \"\"\"         ADD suffix TO THE filename (NOT INCLUDING THE FILE EXTENSION)         \"\"\"         path = filename.split(\"/\")         parts = path[-1].split(\".\")         i = max(len(parts) - 2, 0)         parts[i] = parts[i] + suffix         path[-1] = \".\".join(parts)         return \"/\".join(path)", "target": 1, "target_options": [0, 1]}
{"input": "how to save print to txt file python [SEP] def wr_txt(self, fout_txt=\"gos_depth01.txt\", title=None):         \"\"\"write text table of depth-01 GO terms and their letter representation.\"\"\"         with open(fout_txt, 'w') as prt:             self.prt_header(prt, title)             data_nts = self.prt_txt(prt)             sys.stdout.write(\"  {N:>5} items WROTE: {TXT}\\n\".format(                 N=len(data_nts), TXT=fout_txt))", "target": 1, "target_options": [0, 1]}
{"input": "how to check postion of python program after break [SEP] def timeout_thread_handler(timeout, stop_event):     \"\"\"A background thread to kill the process if it takes too long.      Args:         timeout (float): The number of seconds to wait before killing             the process.         stop_event (Event): An optional event to cleanly stop the background             thread if required during testing.     \"\"\"      stop_happened = stop_event.wait(timeout)     if stop_happened is False:         print(\"Killing program due to %f second timeout\" % timeout)      os._exit(2)", "target": 1, "target_options": [0, 1]}
{"input": "python sort second item in a list of tuples [SEP] def as_tuple(self, value):         \"\"\"Utility function which converts lists to tuples.\"\"\"         if isinstance(value, list):             value = tuple(value)         return value", "target": 1, "target_options": [0, 1]}
{"input": "remove key value from pythondictinary [SEP] def _prune(self):         \"\"\"Primitive way to keep dict in sync with RB.\"\"\"         delkeys = [k for k in self.keys() if k not in self.__ringbuffer]         for k in delkeys:  # necessary because dict is changed during iterations             super(KRingbuffer,self).__delitem__(k)", "target": 1, "target_options": [0, 1]}
{"input": "ad number from list python [SEP] def flatten(l, types=(list, float)):     \"\"\"     Flat nested list of lists into a single list.     \"\"\"     l = [item if isinstance(item, types) else [item] for item in l]     return [item for sublist in l for item in sublist]", "target": 1, "target_options": [0, 1]}
{"input": "how to make word into letter by letter in python [SEP] def clean(self, text):         \"\"\"Remove all unwanted characters from text.\"\"\"         return ''.join([c for c in text if c in self.alphabet])", "target": 1, "target_options": [0, 1]}
{"input": "python split list into lists by lenth [SEP] def flatten_list(l):     \"\"\" Nested lists to single-level list, does not split strings\"\"\"     return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))", "target": 1, "target_options": [0, 1]}
{"input": "python detect any duplicate in list [SEP] def remove_duplicates(lst):     \"\"\"     Emulate what a Python ``set()`` does, but keeping the element's order.     \"\"\"     dset = set()     return [l for l in lst if l not in dset and not dset.add(l)]", "target": 1, "target_options": [0, 1]}
{"input": "python script how to exit [SEP] def exit(exit_code=0):   r\"\"\"A function to support exiting from exit hooks.    Could also be used to exit from the calling scripts in a thread safe manner.   \"\"\"   core.processExitHooks()    if state.isExitHooked and not hasattr(sys, 'exitfunc'): # The function is called from the exit hook     sys.stderr.flush()     sys.stdout.flush()     os._exit(exit_code) #pylint: disable=W0212    sys.exit(exit_code)", "target": 1, "target_options": [0, 1]}
{"input": "python check file permission in windows [SEP] def chmod_add_excute(filename):         \"\"\"         Adds execute permission to file.         :param filename:         :return:         \"\"\"         st = os.stat(filename)         os.chmod(filename, st.st_mode | stat.S_IEXEC)", "target": 1, "target_options": [0, 1]}
{"input": "how to match letter in list python [SEP] def isin(elems, line):     \"\"\"Check if an element from a list is in a string.      :type elems: list     :type line: str      \"\"\"     found = False     for e in elems:         if e in line.lower():             found = True             break     return found", "target": 1, "target_options": [0, 1]}
{"input": "python check whether a day is friday [SEP] def is_third_friday(day=None):     \"\"\" check if day is month's 3rd friday \"\"\"     day = day if day is not None else datetime.datetime.now()     defacto_friday = (day.weekday() == 4) or (         day.weekday() == 3 and day.hour() >= 17)     return defacto_friday and 14 < day.day < 22", "target": 1, "target_options": [0, 1]}
{"input": "create a dictionary from two list python [SEP] def list_of_lists_to_dict(l):     \"\"\" Convert list of key,value lists to dict      [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]     {'id': [1, 2, 3], 'foo': [4]}     \"\"\"     d = {}     for key, val in l:         d.setdefault(key, []).append(val)     return d", "target": 1, "target_options": [0, 1]}
{"input": "how to append object in a specific index in list python [SEP] def append(self, item):         \"\"\" append item and print it to stdout \"\"\"         print(item)         super(MyList, self).append(item)", "target": 1, "target_options": [0, 1]}
{"input": "split on any whitespace python [SEP] def normalize_value(text):     \"\"\"     This removes newlines and multiple spaces from a string.     \"\"\"     result = text.replace('\\n', ' ')     result = re.subn('[ ]{2,}', ' ', result)[0]     return result", "target": 1, "target_options": [0, 1]}
{"input": "python extract date from timesdelta [SEP] def timestamp_from_dt(dt, epoch=datetime(1970, 1, 1)):     \"\"\"     Convert a datetime to a timestamp.     https://stackoverflow.com/a/8778548/141395     \"\"\"     delta = dt - epoch     # return delta.total_seconds()     return delta.seconds + delta.days * 86400", "target": 1, "target_options": [0, 1]}
{"input": "python urllib how to save image use [SEP] def url_to_image(url):     \"\"\"     Fetch an image from url and convert it into a Pillow Image object     \"\"\"     r = requests.get(url)     image = StringIO(r.content)     return image", "target": 1, "target_options": [0, 1]}
{"input": "validation for numbers in python [SEP] def normalize_unitnumber(unit_number):     \"\"\"Returns a normalized unit number, i.e. integers     Raises exception X10InvalidUnitNumber if unit number appears to be invalid     \"\"\"     try:         try:             unit_number = int(unit_number)         except ValueError:             raise X10InvalidUnitNumber('%r not a valid unit number' % unit_number)     except TypeError:         raise X10InvalidUnitNumber('%r not a valid unit number' % unit_number)     if not (1 <= unit_number <= 16):         raise X10InvalidUnitNumber('%r not a valid unit number' % unit_number)     return unit_number", "target": 1, "target_options": [0, 1]}
{"input": "how to remove duplicates from a text file python [SEP] def read_set_from_file(filename: str) -> Set[str]:     \"\"\"     Extract a de-duped collection (set) of text from a file.     Expected file format is one item per line.     \"\"\"     collection = set()     with open(filename, 'r') as file_:         for line in file_:             collection.add(line.rstrip())     return collection", "target": 1, "target_options": [0, 1]}
{"input": "python functions that compute the l1 and l2 distances between x and y [SEP] def skip_connection_distance(a, b):     \"\"\"The distance between two skip-connections.\"\"\"     if a[2] != b[2]:         return 1.0     len_a = abs(a[1] - a[0])     len_b = abs(b[1] - b[0])     return (abs(a[0] - b[0]) + abs(len_a - len_b)) / (max(a[0], b[0]) + max(len_a, len_b))", "target": 1, "target_options": [0, 1]}
{"input": "replace word in a file python [SEP] def replace_all(filepath, searchExp, replaceExp):     \"\"\"     Replace all the ocurrences (in a file) of a string with another value.     \"\"\"     for line in fileinput.input(filepath, inplace=1):         if searchExp in line:             line = line.replace(searchExp, replaceExp)         sys.stdout.write(line)", "target": 1, "target_options": [0, 1]}
{"input": "concatenate list items into string python [SEP] def commajoin_as_strings(iterable):     \"\"\" Join the given iterable with ',' \"\"\"     return _(u',').join((six.text_type(i) for i in iterable))", "target": 1, "target_options": [0, 1]}
{"input": "python user defined function email with attachments [SEP] def create_message(username, message):     \"\"\" Creates a standard message from a given user with the message          Replaces newline with html break \"\"\"     message = message.replace('\\n', '<br/>')     return '{{\"service\":1, \"data\":{{\"message\":\"{mes}\", \"username\":\"{user}\"}} }}'.format(mes=message, user=username)", "target": 1, "target_options": [0, 1]}
{"input": "deleting all values from a dictionary in python [SEP] def rm_keys_from_dict(d, keys):     \"\"\"     Given a dictionary and a key list, remove any data in the dictionary with the given keys.      :param dict d: Metadata     :param list keys: Keys to be removed     :return dict d: Metadata     \"\"\"     # Loop for each key given     for key in keys:         # Is the key in the dictionary?         if key in d:             try:                 d.pop(key, None)             except KeyError:                 # Not concerned with an error. Keep going.                 pass     return d", "target": 1, "target_options": [0, 1]}
{"input": "send a variable to a file in python [SEP] def write(file_name, data):     \"\"\"Encode and write a Hip file.\"\"\"     with open(file_name, 'w') as f:         f.write(encode(data))", "target": 1, "target_options": [0, 1]}
{"input": "python how to only accept intigers as inputs [SEP] def safe_int_conv(number):     \"\"\"Safely convert a single number to integer.\"\"\"     try:         return int(np.array(number).astype(int, casting='safe'))     except TypeError:         raise ValueError('cannot safely convert {} to integer'.format(number))", "target": 1, "target_options": [0, 1]}
{"input": "for loop comment line python [SEP] def firmware_download_input_rbridge_id(self, **kwargs):         \"\"\"Auto Generated Code         \"\"\"         config = ET.Element(\"config\")         firmware_download = ET.Element(\"firmware_download\")         config = firmware_download         input = ET.SubElement(firmware_download, \"input\")         rbridge_id = ET.SubElement(input, \"rbridge-id\")         rbridge_id.text = kwargs.pop('rbridge_id')          callback = kwargs.pop('callback', self._callback)         return callback(config)", "target": 1, "target_options": [0, 1]}
{"input": "python get a specific column in matrix [SEP] def _column(arr, indexes):     \"\"\" Returns a column with given indexes from a deep array      For example, if the array is a matrix and indexes is a single int, will     return arr[:,indexes]. If the array is an order 3 tensor and indexes is a     pair of ints, will return arr[:,indexes[0],indexes[1]], etc.      \"\"\"     if arr.ndim == 2 and types.is_int(indexes):         return arr[:, indexes]     elif arr.ndim == 3 and len(indexes) == 2:         return arr[:, indexes[0], indexes[1]]     else:         raise NotImplementedError('Only supporting arrays of dimension 2 and 3 as yet.')", "target": 1, "target_options": [0, 1]}
{"input": "multiple returns function python print with spaces [SEP] def indented_show(text, howmany=1):         \"\"\"Print a formatted indented text.         \"\"\"         print(StrTemplate.pad_indent(text=text, howmany=howmany))", "target": 1, "target_options": [0, 1]}
{"input": "how to check lenght of matrix in python [SEP] def is_square_matrix(mat):     \"\"\"Test if an array is a square matrix.\"\"\"     mat = np.array(mat)     if mat.ndim != 2:         return False     shape = mat.shape     return shape[0] == shape[1]", "target": 1, "target_options": [0, 1]}
{"input": "format array python string [SEP] def safe_format(s, **kwargs):   \"\"\"   :type s str   \"\"\"   return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))", "target": 1, "target_options": [0, 1]}
{"input": "list choronical order python [SEP] def csort(objs, key):     \"\"\"Order-preserving sorting function.\"\"\"     idxs = dict((obj, i) for (i, obj) in enumerate(objs))     return sorted(objs, key=lambda obj: (key(obj), idxs[obj]))", "target": 1, "target_options": [0, 1]}
{"input": "python sort second item in a list of tuples [SEP] def pairwise(iterable):     \"\"\"From itertools cookbook. [a, b, c, ...] -> (a, b), (b, c), ...\"\"\"     first, second = tee(iterable)     next(second, None)     return zip(first, second)", "target": 1, "target_options": [0, 1]}
{"input": "python directory tree print [SEP] def print_tree(self, indent=2):         \"\"\" print_tree: prints out structure of tree             Args: indent (int): What level of indentation at which to start printing             Returns: None         \"\"\"         config.LOGGER.info(\"{indent}{data}\".format(indent=\"   \" * indent, data=str(self)))         for child in self.children:             child.print_tree(indent + 1)", "target": 1, "target_options": [0, 1]}
{"input": "how to remove integers from string python [SEP] def str2int(string_with_int):     \"\"\" Collect digits from a string \"\"\"     return int(\"\".join([char for char in string_with_int if char in string.digits]) or 0)", "target": 1, "target_options": [0, 1]}
{"input": "python index of max in array [SEP] def MultiArgMax(x):   \"\"\"   Get tuple (actually a generator) of indices where the max value of   array x occurs. Requires that x have a max() method, as x.max()   (in the case of NumPy) is much faster than max(x).   For a simpler, faster argmax when there is only a single maximum entry,   or when knowing only the first index where the maximum occurs,   call argmax() on a NumPy array.    :param x: Any sequence that has a max() method.   :returns: Generator with the indices where the max value occurs.   \"\"\"   m = x.max()   return (i for i, v in enumerate(x) if v == m)", "target": 1, "target_options": [0, 1]}
{"input": "print to create a range in python [SEP] def extent(self):          \"\"\"         return range of 2D data         \"\"\"          return [min(self.x), max(self.x), min(self.y), max(self.y)]", "target": 1, "target_options": [0, 1]}
{"input": "check list of points and see if any are collinear python [SEP] def intersects(self, other_grid_coordinates):         \"\"\" returns True if the GC's overlap. \"\"\"         ogc = other_grid_coordinates  # alias         # for explanation: http://stackoverflow.com/questions/306316/determine-if-two-rectangles-overlap-each-other         # Note the flipped y-coord in this coord system.         ax1, ay1, ax2, ay2 = self.ULC.lon, self.ULC.lat, self.LRC.lon, self.LRC.lat         bx1, by1, bx2, by2 = ogc.ULC.lon, ogc.ULC.lat, ogc.LRC.lon, ogc.LRC.lat         if ((ax1 <= bx2) and (ax2 >= bx1) and (ay1 >= by2) and (ay2 <= by1)):             return True         else:             return False", "target": 1, "target_options": [0, 1]}
{"input": "python range with fixed increments [SEP] def frange(start, stop, step, precision):     \"\"\"A generator that will generate a range of floats.\"\"\"     value = start     while round(value, precision) < stop:         yield round(value, precision)         value += step", "target": 1, "target_options": [0, 1]}
{"input": "check if all elements in a list are in a list of list python [SEP] def valid (names):     \"\"\" Returns true iff all elements of names are valid features.     \"\"\"     if isinstance(names, str):         names = [names]         assert is_iterable_typed(names, basestring)      return all(name in __all_features for name in names)", "target": 1, "target_options": [0, 1]}
{"input": "test django api in python shell [SEP] def test(*args):     \"\"\"     Run unit tests.     \"\"\"     subprocess.call([\"py.test-2.7\"] + list(args))     subprocess.call([\"py.test-3.4\"] + list(args))", "target": 1, "target_options": [0, 1]}
{"input": "python 3 overriding print [SEP] def flushed_print(*args, **kwargs):     \"\"\"     Use to replace print(*args, flush=True) that doesn't exist for python<3.3     \"\"\"     print(*args, **kwargs)     file = kwargs.get('file', sys.stdout)     file.flush() if file is not None else sys.stdout.flush()", "target": 1, "target_options": [0, 1]}
{"input": "populate a tuple python [SEP] def compose_all(tups):   \"\"\"Compose all given tuples together.\"\"\"   from . import ast  # I weep for humanity   return functools.reduce(lambda x, y: x.compose(y), map(ast.make_tuple, tups), ast.make_tuple({}))", "target": 1, "target_options": [0, 1]}
