{"input": "// CreateJob creates a new job based on the provided structure. [SEP] func (c *Client) CreateJob(job *JobDetail) (*JobSummary, error) {\n\treturn c.importJob(job, \"create\")\n}", "target": 1, "target_options": [0, 1]}
{"input": "// CreateJob creates a new job based on the provided structure. [SEP] func GRPCCode(err error) codes.Code {\n\te, ok := err.(Error)\n\tif ok {\n\t\treturn e.Type().GRPCCode()\n\t}\n\n\treturn grpc.Code(err)\n}", "target": 0, "target_options": [0, 1]}
{"input": "// MarshalJSON supports json.Marshaler interface [SEP] func (v ResolveBlobParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoIo1(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}", "target": 1, "target_options": [0, 1]}
{"input": "// MarshalJSON supports json.Marshaler interface [SEP] func (s *FileSnapshotSink) writeMeta() error {\n\t// Open the meta file\n\tmetaPath := filepath.Join(s.dir, metaFilePath)\n\tfh, err := os.Create(metaPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fh.Close()\n\n\t// Buffer the file IO\n\tbuffered := bufio.NewWriter(fh)\n\n\t// Write out as JSON\n\tenc := json.NewEncoder(buffered)\n\tif err := enc.Encode(&s.meta); err != nil {\n\t\treturn err\n\t}\n\n\tif err = buffered.Flush(); err != nil {\n\t\treturn err\n\t}\n\n\tif err = fh.Sync(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "target": 0, "target_options": [0, 1]}
{"input": "// ChecksumString64S returns the checksum of the input data, without creating a copy, with the specific seed. [SEP] func ChecksumString64S(s string, seed uint64) uint64 {\n\tif len(s) == 0 {\n\t\treturn Checksum64S(nil, seed)\n\t}\n\n\tss := (*reflect.StringHeader)(unsafe.Pointer(&s))\n\treturn Checksum64S((*[maxInt32]byte)(unsafe.Pointer(ss.Data))[:len(s):len(s)], seed)\n}", "target": 1, "target_options": [0, 1]}
{"input": "// ChecksumString64S returns the checksum of the input data, without creating a copy, with the specific seed. [SEP] func newClient(MockServiceManager client.Service, verificationServiceManager client.Service, messageServiceManager client.Service, publishServiceManager client.Service) *PactClient {\n\tMockServiceManager.Setup()\n\tverificationServiceManager.Setup()\n\tmessageServiceManager.Setup()\n\tpublishServiceManager.Setup()\n\n\treturn &PactClient{\n\t\tpactMockSvcManager:     MockServiceManager,\n\t\tverificationSvcManager: verificationServiceManager,\n\t\tmessageSvcManager:      messageServiceManager,\n\t\tpublishSvcManager:      publishServiceManager,\n\t\tTimeoutDuration:        10 * time.Second,\n\t}\n}", "target": 0, "target_options": [0, 1]}
{"input": "// writeMeta is used to write out the metadata we have. [SEP] func (s *FileSnapshotSink) writeMeta() error {\n\t// Open the meta file\n\tmetaPath := filepath.Join(s.dir, metaFilePath)\n\tfh, err := os.Create(metaPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fh.Close()\n\n\t// Buffer the file IO\n\tbuffered := bufio.NewWriter(fh)\n\n\t// Write out as JSON\n\tenc := json.NewEncoder(buffered)\n\tif err := enc.Encode(&s.meta); err != nil {\n\t\treturn err\n\t}\n\n\tif err = buffered.Flush(); err != nil {\n\t\treturn err\n\t}\n\n\tif err = fh.Sync(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "target": 1, "target_options": [0, 1]}
{"input": "// writeMeta is used to write out the metadata we have. [SEP] func (c *Client) CreateJob(job *JobDetail) (*JobSummary, error) {\n\treturn c.importJob(job, \"create\")\n}", "target": 0, "target_options": [0, 1]}
{"input": "// GRPCCode returns the corresponding http status code from an error [SEP] func GRPCCode(err error) codes.Code {\n\te, ok := err.(Error)\n\tif ok {\n\t\treturn e.Type().GRPCCode()\n\t}\n\n\treturn grpc.Code(err)\n}", "target": 1, "target_options": [0, 1]}
{"input": "// GRPCCode returns the corresponding http status code from an error [SEP] func (v *GetMetricsReturns) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoPerformance2(&r, v)\n\treturn r.Error()\n}", "target": 0, "target_options": [0, 1]}
{"input": "// Do executes Emulation.resetPageScaleFactor against the provided context. [SEP] func (p *ResetPageScaleFactorParams) Do(ctx context.Context) (err error) {\n\treturn cdp.Execute(ctx, CommandResetPageScaleFactor, nil, nil)\n}", "target": 1, "target_options": [0, 1]}
{"input": "// Do executes Emulation.resetPageScaleFactor against the provided context. [SEP] func (v *GetMetricsReturns) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoPerformance2(&r, v)\n\treturn r.Error()\n}", "target": 0, "target_options": [0, 1]}
{"input": "// UnmarshalJSON supports json.Unmarshaler interface [SEP] func (v *GetMetricsReturns) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoPerformance2(&r, v)\n\treturn r.Error()\n}", "target": 1, "target_options": [0, 1]}
{"input": "// UnmarshalJSON supports json.Unmarshaler interface [SEP] func ChecksumString64S(s string, seed uint64) uint64 {\n\tif len(s) == 0 {\n\t\treturn Checksum64S(nil, seed)\n\t}\n\n\tss := (*reflect.StringHeader)(unsafe.Pointer(&s))\n\treturn Checksum64S((*[maxInt32]byte)(unsafe.Pointer(ss.Data))[:len(s):len(s)], seed)\n}", "target": 0, "target_options": [0, 1]}
{"input": "// newClient creates a new Pact client manager with the provided services [SEP] func newClient(MockServiceManager client.Service, verificationServiceManager client.Service, messageServiceManager client.Service, publishServiceManager client.Service) *PactClient {\n\tMockServiceManager.Setup()\n\tverificationServiceManager.Setup()\n\tmessageServiceManager.Setup()\n\tpublishServiceManager.Setup()\n\n\treturn &PactClient{\n\t\tpactMockSvcManager:     MockServiceManager,\n\t\tverificationSvcManager: verificationServiceManager,\n\t\tmessageSvcManager:      messageServiceManager,\n\t\tpublishSvcManager:      publishServiceManager,\n\t\tTimeoutDuration:        10 * time.Second,\n\t}\n}", "target": 1, "target_options": [0, 1]}
{"input": "// newClient creates a new Pact client manager with the provided services [SEP] func (c *Client) CreateJob(job *JobDetail) (*JobSummary, error) {\n\treturn c.importJob(job, \"create\")\n}", "target": 0, "target_options": [0, 1]}
{"input": "// ApplySingleExtract applies the given JSON selector and returns the results.\n// It's an error if the selector yields more than one value. [SEP] func (d *Displayer) ApplySingleExtract(extract string) error {\n\tif err := d.ApplyExtract(extract, true); err != nil {\n\t\treturn err\n\t}\n\toutputs := d.RawOutput.([]interface{})\n\tif len(outputs) != 1 {\n\t\td.RawOutput = nil\n\t\treturn fmt.Errorf(\"JSON selector '%s' returned %d instead of one value\",\n\t\t\textract, len(outputs))\n\t}\n\tif len(outputs) == 0 {\n\t\td.RawOutput = \"\"\n\t} else {\n\t\tswitch v := outputs[0].(type) {\n\t\tcase nil:\n\t\t\td.RawOutput = \"\"\n\t\tcase float64, bool:\n\t\t\td.RawOutput = fmt.Sprint(v)\n\t\tcase string:\n\t\t\td.RawOutput = v\n\t\tdefault:\n\t\t\td.RawOutput = v\n\t\t}\n\t\td.RawOutput = outputs[0]\n\t}\n\treturn nil\n}", "target": 1, "target_options": [0, 1]}
{"input": "// ApplySingleExtract applies the given JSON selector and returns the results.\n// It's an error if the selector yields more than one value. [SEP] func (c *Client) CreateJob(job *JobDetail) (*JobSummary, error) {\n\treturn c.importJob(job, \"create\")\n}", "target": 0, "target_options": [0, 1]}
{"input": "// newNetPipeline is used to construct a netPipeline from a given\n// transport and connection. [SEP] func newNetPipeline(trans *NetworkTransport, conn *netConn) *netPipeline {\n\tn := &netPipeline{\n\t\tconn:         conn,\n\t\ttrans:        trans,\n\t\tdoneCh:       make(chan AppendFuture, rpcMaxPipeline),\n\t\tinprogressCh: make(chan *appendFuture, rpcMaxPipeline),\n\t\tshutdownCh:   make(chan struct{}),\n\t}\n\tgo n.decodeResponses()\n\treturn n\n}", "target": 1, "target_options": [0, 1]}
{"input": "// newNetPipeline is used to construct a netPipeline from a given\n// transport and connection. [SEP] func ChecksumString64S(s string, seed uint64) uint64 {\n\tif len(s) == 0 {\n\t\treturn Checksum64S(nil, seed)\n\t}\n\n\tss := (*reflect.StringHeader)(unsafe.Pointer(&s))\n\treturn Checksum64S((*[maxInt32]byte)(unsafe.Pointer(ss.Data))[:len(s):len(s)], seed)\n}", "target": 0, "target_options": [0, 1]}
