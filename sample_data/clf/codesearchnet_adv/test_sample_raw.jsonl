{"url": "https://github.com/spdx/tools-python/blob/301d72f6ae57c832c1da7f6402fa49b192de6810/spdx/parsers/tagvaluebuilders.py#L979-L994", "sha": "301d72f6ae57c832c1da7f6402fa49b192de6810", "docstring_summary": "Raises OrderError if no package or file defined.\n        Raises SPDXValueError if not free form text.\n        Raises CardinalityError if more than one.", "language": "python", "parameters": "(self, doc, text)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ",", "arg_2", ")", ":", "if", "arg_0", ".", "has_package", "(", "arg_1", ")", "and", "arg_0", ".", "has_file", "(", "arg_1", ")", ":", "if", "not", "arg_0", ".", "file_notice_set", ":", "arg_0", ".", "file_notice_set", "=", "True", "if", "validations", ".", "validate_file_notice", "(", "arg_2", ")", ":", "arg_0", ".", "file", "(", "arg_1", ")", ".", "notice", "=", "str_from_text", "(", "arg_2", ")", "else", ":", "raise", "SPDXValueError", "(", "'File::Notice'", ")", "else", ":", "raise", "CardinalityError", "(", "'File::Notice'", ")", "else", ":", "raise", "OrderError", "(", "'File::Notice'", ")"], "function": "def Func(arg_0, arg_1, arg_2):\n        \"\"\"Raises OrderError if no package or file defined.\n        Raises SPDXValueError if not free form text.\n        Raises CardinalityError if more than one.\n        \"\"\"\n        if arg_0.has_package(arg_1) and arg_0.has_file(arg_1):\n            if not arg_0.file_notice_set:\n                arg_0.file_notice_set = True\n                if validations.validate_file_notice(arg_2):\n                    arg_0.file(arg_1).notice = str_from_text(arg_2)\n                else:\n                    raise SPDXValueError('File::Notice')\n            else:\n                raise CardinalityError('File::Notice')\n        else:\n            raise OrderError('File::Notice')", "path": "spdx/parsers/tagvaluebuilders.py", "identifier": "FileBuilder.set_file_notice", "docstring": "Raises OrderError if no package or file defined.\n        Raises SPDXValueError if not free form text.\n        Raises CardinalityError if more than one.", "docstring_tokens": ["Raises", "OrderError", "if", "no", "package", "or", "file", "defined", ".", "Raises", "SPDXValueError", "if", "not", "free", "form", "text", ".", "Raises", "CardinalityError", "if", "more", "than", "one", "."], "nwo": "spdx/tools-python", "score": 0.8936869982558252, "idx": 278163}
{"url": "https://github.com/pybel/pybel-tools/blob/3491adea0ac4ee60f57275ef72f9b73da6dbfe0c/src/pybel_tools/mutation/collapse.py#L215-L241", "sha": "3491adea0ac4ee60f57275ef72f9b73da6dbfe0c", "docstring_summary": "Collapse all nodes with the same name, merging namespaces by picking first alphabetical one.", "language": "python", "parameters": "(graph: BELGraph)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ":", "arg_1", ")", "->", "None", ":", "arg_2", "=", "defaultdict", "(", "set", ")", "arg_3", "=", "set", "(", ")", "arg_4", "=", "tqdm", "(", "itt", ".", "combinations", "(", "arg_0", ",", "r", "=", "2", ")", ",", "total", "=", "arg_0", ".", "number_of_nodes", "(", ")", "*", "(", "arg_0", ".", "number_of_nodes", "(", ")", "-", "1", ")", "/", "2", ")", "for", "arg_5", ",", "arg_6", "in", "arg_4", ":", "if", "arg_6", "in", "arg_3", ":", "continue", "arg_7", ",", "arg_8", "=", "arg_5", ".", "get", "(", "NAME", ")", ",", "arg_6", ".", "get", "(", "NAME", ")", "if", "not", "arg_7", "or", "not", "arg_8", "or", "arg_7", ".", "lower", "(", ")", "!=", "arg_8", ".", "lower", "(", ")", ":", "continue", "if", "arg_5", ".", "keys", "(", ")", "!=", "arg_6", ".", "keys", "(", ")", ":", "continue", "for", "arg_9", "in", "set", "(", "arg_5", ".", "keys", "(", ")", ")", "-", "{", "NAME", ",", "NAMESPACE", "}", ":", "if", "arg_5", "[", "arg_9", "]", "!=", "arg_6", "[", "arg_9", "]", ":", "continue", "arg_2", "[", "arg_5", "]", ".", "add", "(", "arg_6", ")", "arg_3", ".", "add", "(", "arg_6", ")", "collapse_nodes", "(", "arg_0", ",", "arg_2", ")"], "function": "def Func(arg_0: arg_1) -> None:\n    \"\"\"Collapse all nodes with the same name, merging namespaces by picking first alphabetical one.\"\"\"\n    arg_2 = defaultdict(set) # Collapse mapping dict\n    arg_3 = set() # Things already mapped while iterating\n\n    arg_4 = tqdm(itt.combinations(arg_0, r=2), total=arg_0.number_of_nodes() * (arg_0.number_of_nodes() - 1) / 2)\n    for arg_5, arg_6 in arg_4:\n        if arg_6 in arg_3:\n            continue\n\n        arg_7, arg_8 = arg_5.get(NAME), arg_6.get(NAME)\n        if not arg_7 or not arg_8 or arg_7.lower() != arg_8.lower():\n            continue\n\n        if arg_5.keys() != arg_6.keys():  # not same version (might have variants)\n            continue\n\n        # Ensure that the values in the keys are also the same\n        for arg_9 in set(arg_5.keys()) - {NAME, NAMESPACE}:\n            if arg_5[arg_9] != arg_6[arg_9]:  # something different\n                continue\n\n        arg_2[arg_5].add(arg_6)\n        # Keep track of things that has been already mapped\n        arg_3.add(arg_6)\n\n    collapse_nodes(arg_0, arg_2)", "path": "src/pybel_tools/mutation/collapse.py", "identifier": "collapse_nodes_with_same_names", "docstring": "Collapse all nodes with the same name, merging namespaces by picking first alphabetical one.", "docstring_tokens": ["Collapse", "all", "nodes", "with", "the", "same", "name", "merging", "namespaces", "by", "picking", "first", "alphabetical", "one", "."], "nwo": "pybel/pybel-tools", "score": 0.27946077266739355, "idx": 265099}
{"url": "https://github.com/Qiskit/qiskit-terra/blob/d4f58d903bc96341b816f7c35df936d6421267d1/qiskit/pulse/pulse_lib/discrete.py#L116-L132", "sha": "d4f58d903bc96341b816f7c35df936d6421267d1", "docstring_summary": "Generates cosine wave `SamplePulse`.", "language": "python", "parameters": "(duration: int, amp: complex, freq: float = None,\n        phase: float = 0, name: str = None)", "return_statement": "return _sampled_cos_pulse(duration, amp, freq, phase=phase, name=name)", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ":", "arg_1", ",", "arg_2", ":", "arg_3", ",", "arg_4", ":", "arg_5", "=", "None", ",", "arg_6", ":", "arg_5", "=", "0", ",", "arg_7", ":", "arg_8", "=", "None", ")", "->", "SamplePulse", ":", "if", "arg_4", "is", "None", ":", "arg_4", "=", "1", "/", "arg_0", "return", "_sampled_Func_pulse", "(", "arg_0", ",", "arg_2", ",", "arg_4", ",", "arg_6", "=", "arg_6", ",", "arg_7", "=", "arg_7", ")"], "function": "def Func(arg_0: arg_1, arg_2: arg_3, arg_4: arg_5 = None,\n        arg_6: arg_5 = 0, arg_7: arg_8 = None) -> SamplePulse:\n    \"\"\"Generates Funcine wave `SamplePulse`.\n\n    Applies `left` sampling strategy to generate discrete pulse from continuous function.\n\n    Args:\n        duration: Duration of pulse. Must be greater than zero.\n        amp: Pulse amplitude.\n        freq: Pulse frequency, units of 1/dt. If `None` defaults to single cycle.\n        phase: Pulse phase.\n        name: Name of pulse.\n    \"\"\"\n    if arg_4 is None:\n        arg_4 = 1/arg_0\n\n    return _sampled_Func_pulse(arg_0, arg_2, arg_4, arg_6=arg_6, arg_7=arg_7)", "path": "qiskit/pulse/pulse_lib/discrete.py", "identifier": "cos", "docstring": "Generates cosine wave `SamplePulse`.\n\n    Applies `left` sampling strategy to generate discrete pulse from continuous function.\n\n    Args:\n        duration: Duration of pulse. Must be greater than zero.\n        amp: Pulse amplitude.\n        freq: Pulse frequency, units of 1/dt. If `None` defaults to single cycle.\n        phase: Pulse phase.\n        name: Name of pulse.", "docstring_tokens": ["Generates", "cosine", "wave", "SamplePulse", "."], "nwo": "Qiskit/qiskit-terra", "score": 0.9746485763042565, "idx": 274068}
{"url": "https://github.com/chaoss/grimoirelab-perceval-mozilla/blob/4514f8d3d609d3cb79d83c72d51fcc4b4a7daeb4/perceval/backends/mozilla/kitsune.py#L247-L270", "sha": "4514f8d3d609d3cb79d83c72d51fcc4b4a7daeb4", "docstring_summary": "Retrieve questions from older to newer updated starting offset", "language": "python", "parameters": "(self, offset=None)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", "=", "None", ")", ":", "arg_2", "=", "KitsuneClient", ".", "FIRST_PAGE", "if", "arg_1", ":", "arg_2", "+=", "int", "(", "arg_1", "/", "KitsuneClient", ".", "ITEMS_PER_PAGE", ")", "while", "True", ":", "arg_3", "=", "urijoin", "(", "arg_0", ".", "base_url", ",", "'/question'", ")", "+", "'/'", "arg_4", "=", "{", "\"page\"", ":", "arg_2", ",", "\"ordering\"", ":", "\"updated\"", "}", "arg_5", "=", "arg_0", ".", "fetch", "(", "arg_3", ",", "arg_4", ")", "yield", "arg_5", "arg_6", "=", "json", ".", "loads", "(", "arg_5", ")", "arg_7", "=", "arg_6", "[", "'next'", "]", "if", "not", "arg_7", ":", "break", "arg_2", "+=", "1"], "function": "def Func(arg_0, arg_1=None):\n        \"\"\"Retrieve questions from older to newer updated starting offset\"\"\"\n\n        arg_2 = KitsuneClient.FIRST_PAGE\n\n        if arg_1:\n            arg_2 += int(arg_1 / KitsuneClient.ITEMS_PER_PAGE)\n\n        while True:\n            arg_3 = urijoin(arg_0.base_url, '/question') + '/'\n\n            arg_4 = {\n                \"page\": arg_2,\n                \"ordering\": \"updated\"\n            }\n\n            arg_5 = arg_0.fetch(arg_3, arg_4)\n            yield arg_5\n\n            arg_6 = json.loads(arg_5)\n            arg_7 = arg_6['next']\n            if not arg_7:\n                break\n            arg_2 += 1", "path": "perceval/backends/mozilla/kitsune.py", "identifier": "KitsuneClient.get_questions", "docstring": "Retrieve questions from older to newer updated starting offset", "docstring_tokens": ["Retrieve", "questions", "from", "older", "to", "newer", "updated", "starting", "offset"], "nwo": "chaoss/grimoirelab-perceval-mozilla", "score": 0.18579120894425885, "idx": 262446}
{"url": "https://github.com/tdryer/hangups/blob/85c0bf0a57698d077461283895707260f9dbf931/hangups/ui/__main__.py#L419-L423", "sha": "85c0bf0a57698d077461283895707260f9dbf931", "docstring_summary": "Re-order the conversations when an event occurs.", "language": "python", "parameters": "(self, _)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "arg_0", ".", "sort", "(", "key", "=", "lambda", "conv_button", ":", "conv_button", ".", "last_modified", ",", "reverse", "=", "True", ")"], "function": "def Func(arg_0, arg_1):\n        \"\"\"Re-order the conversations when an event occurs.\"\"\"\n        # TODO: handle adding new conversations\n        arg_0.sort(key=lambda conv_button: conv_button.last_modified,\n                  reverse=True)", "path": "hangups/ui/__main__.py", "identifier": "ConversationListWalker._on_event", "docstring": "Re-order the conversations when an event occurs.", "docstring_tokens": ["Re", "-", "order", "the", "conversations", "when", "an", "event", "occurs", "."], "nwo": "tdryer/hangups", "score": 0.7463257586360665, "idx": 263671}
{"url": "https://github.com/juga0/dhcpcanon/blob/9f51a29e57fe93dc93fb22bb0ed12fcfe9557e59/dhcpcanon/timers.py#L78-L97", "sha": "9f51a29e57fe93dc93fb22bb0ed12fcfe9557e59", "docstring_summary": "Generate time in seconds to retransmit DHCPREQUEST.", "language": "python", "parameters": "(lease)", "return_statement": "return time_left", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ")", ":", "arg_1", "=", "(", "arg_0", ".", "rebinding_time", "-", "arg_0", ".", "renewing_time", ")", "*", "RENEW_PERC", "if", "arg_1", "<", "60", ":", "arg_1", "=", "60", "logger", ".", "debug", "(", "'Next request in renew will happen on %s'", ",", "future_dt_str", "(", "nowutc", "(", ")", ",", "arg_1", ")", ")", "return", "arg_1"], "function": "def Func(arg_0):\n    \"\"\"Generate time in seconds to retransmit DHCPREQUEST.\n\n    [:rfc:`2131#section-4..4.5`]::\n\n        In both RENEWING and REBINDING states,\n        if the client receives no response to its DHCPREQUEST\n        message, the client SHOULD wait one-half of the remaining\n        time until T2 (in RENEWING state) and one-half of the\n        remaining lease time (in REBINDING state), down to a\n        minimum of 60 seconds, before retransmitting the\n        DHCPREQUEST message.\n\n    \"\"\"\n    arg_1 = (arg_0.rebinding_time - arg_0.renewing_time) * RENEW_PERC\n    if arg_1 < 60:\n        arg_1 = 60\n    logger.debug('Next request in renew will happen on %s',\n                 future_dt_str(nowutc(), arg_1))\n    return arg_1", "path": "dhcpcanon/timers.py", "identifier": "gen_timeout_request_renew", "docstring": "Generate time in seconds to retransmit DHCPREQUEST.\n\n    [:rfc:`2131#section-4..4.5`]::\n\n        In both RENEWING and REBINDING states,\n        if the client receives no response to its DHCPREQUEST\n        message, the client SHOULD wait one-half of the remaining\n        time until T2 (in RENEWING state) and one-half of the\n        remaining lease time (in REBINDING state), down to a\n        minimum of 60 seconds, before retransmitting the\n        DHCPREQUEST message.", "docstring_tokens": ["Generate", "time", "in", "seconds", "to", "retransmit", "DHCPREQUEST", "."], "nwo": "juga0/dhcpcanon", "score": 0.37977197872528695, "idx": 264567}
{"url": "https://github.com/funilrys/PyFunceble/blob/cdf69cbde120199171f7158e1c33635753e6e2f5/PyFunceble/logs.py#L101-L116", "sha": "cdf69cbde120199171f7158e1c33635753e6e2f5", "docstring_summary": "Write the content into the given file.", "language": "python", "parameters": "(cls, content, file)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ",", "arg_2", ")", ":", "if", "not", "PyFunceble", ".", "CONFIGURATION", "[", "\"no_files\"", "]", ":", "if", "not", "isinstance", "(", "arg_1", ",", "dict", ")", ":", "arg_1", "=", "{", "}", "Dict", "(", "arg_1", ")", ".", "to_json", "(", "arg_2", ")"], "function": "def Func(arg_0, arg_1, arg_2):\n        \"\"\"\n        Write the content into the given file.\n\n        :param content: The dict to write.\n        :type content: dict\n\n        :param file: The file to write.\n        :type file: str\n        \"\"\"\n\n        if not PyFunceble.CONFIGURATION[\"no_files\"]:\n            if not isinstance(arg_1, dict):\n                arg_1 = {}\n\n            Dict(arg_1).to_json(arg_2)", "path": "PyFunceble/logs.py", "identifier": "Logs._write_content", "docstring": "Write the content into the given file.\n\n        :param content: The dict to write.\n        :type content: dict\n\n        :param file: The file to write.\n        :type file: str", "docstring_tokens": ["Write", "the", "content", "into", "the", "given", "file", "."], "nwo": "funilrys/PyFunceble", "score": 0.7376187981798944, "idx": 273776}
{"url": "https://github.com/sam-washington/requests-aws4auth/blob/1201e470c6d5847b7fe42e937a55755e1895e72c/requests_aws4auth/aws4auth.py#L368-L394", "sha": "1201e470c6d5847b7fe42e937a55755e1895e72c", "docstring_summary": "Try to pull a date from the request by looking first at the\n        x-amz-date header, and if that's not present then the Date header.", "language": "python", "parameters": "(cls, req)", "return_statement": "return date", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "arg_2", "=", "None", "for", "arg_3", "in", "[", "'x-amz-date'", ",", "'date'", "]", ":", "if", "arg_3", "not", "in", "arg_1", ".", "headers", ":", "continue", "try", ":", "arg_4", "=", "arg_0", ".", "parse_date", "(", "arg_1", ".", "headers", "[", "arg_3", "]", ")", "except", "DateFormatError", ":", "continue", "try", ":", "arg_2", "=", "datetime", ".", "datetime", ".", "strptime", "(", "arg_4", ",", "'%Y-%m-%d'", ")", ".", "date", "(", ")", "except", "ValueError", ":", "continue", "else", ":", "break", "return", "arg_2"], "function": "def Func(arg_0, arg_1):\n        \"\"\"\n        Try to pull a date from the request by looking first at the\n        x-amz-date header, and if that's not present then the Date header.\n\n        Return a datetime.date object, or None if neither date header\n        is found or is in a recognisable format.\n\n        req -- a requests PreparedRequest object\n\n        \"\"\"\n        arg_2 = None\n        for arg_3 in ['x-amz-date', 'date']:\n            if arg_3 not in arg_1.headers:\n                continue\n            try:\n                arg_4 = arg_0.parse_date(arg_1.headers[arg_3])\n            except DateFormatError:\n                continue\n            try:\n                arg_2 = datetime.datetime.strptime(arg_4, '%Y-%m-%d').date()\n            except ValueError:\n                continue\n            else:\n                break\n\n        return arg_2", "path": "requests_aws4auth/aws4auth.py", "identifier": "AWS4Auth.get_request_date", "docstring": "Try to pull a date from the request by looking first at the\n        x-amz-date header, and if that's not present then the Date header.\n\n        Return a datetime.date object, or None if neither date header\n        is found or is in a recognisable format.\n\n        req -- a requests PreparedRequest object", "docstring_tokens": ["Try", "to", "pull", "a", "date", "from", "the", "request", "by", "looking", "first", "at", "the", "x", "-", "amz", "-", "date", "header", "and", "if", "that", "s", "not", "present", "then", "the", "Date", "header", "."], "nwo": "sam-washington/requests-aws4auth", "score": 0.36091303233896527, "idx": 263175}
{"url": "https://github.com/rocky/python3-trepan/blob/14e91bc0acce090d67be145b1ac040cab92ac5f3/trepan/lib/disassemble.py#L150-L226", "sha": "14e91bc0acce090d67be145b1ac040cab92ac5f3", "docstring_summary": "Disassemble byte string of code. If end_line is negative\n    it counts the number of statement linestarts to use.", "language": "python", "parameters": "(orig_msg, orig_msg_nocr, code, lasti=-1, cur_line=0,\n                      start_line=-1, end_line=None, relative_pos=False,\n                      varnames=(), names=(), constants=(), cells=(),\n                      freevars=(), linestarts={}, highlight='light',\n                      start_offset=0, end_offset=None)", "return_statement": "return code, offset", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ",", "arg_2", ",", "arg_3", "=", "-", "1", ",", "arg_4", "=", "0", ",", "arg_5", "=", "-", "1", ",", "arg_6", "=", "None", ",", "arg_7", "=", "False", ",", "arg_8", "=", "(", ")", ",", "arg_9", "=", "(", ")", ",", "arg_10", "=", "(", ")", ",", "arg_11", "=", "(", ")", ",", "arg_12", "=", "(", ")", ",", "arg_13", "=", "{", "}", ",", "arg_14", "=", "'light'", ",", "arg_15", "=", "0", ",", "arg_16", "=", "None", ")", ":", "arg_17", "=", "10000", "if", "arg_6", "is", "None", ":", "arg_6", "=", "10000", "elif", "arg_7", ":", "arg_6", "+=", "arg_5", "-", "1", "pass", "arg_18", "=", "findlabels", "(", "arg_2", ")", "arg_19", "=", "lambda", "x", ":", "None", "if", "arg_5", ">", "arg_4", ":", "arg_20", "=", "arg_19", "arg_21", "=", "arg_19", "else", ":", "arg_20", "=", "arg_1", "arg_21", "=", "arg_0", "for", "arg_22", "in", "get_instructions_bytes", "(", "arg_2", ",", "opc", ",", "arg_8", ",", "arg_9", ",", "arg_10", ",", "arg_11", ",", "arg_13", ")", ":", "arg_23", "=", "arg_22", ".", "offset", "if", "arg_16", "and", "arg_23", ">", "arg_16", ":", "break", "if", "arg_22", ".", "starts_line", ":", "if", "arg_23", ":", "arg_21", "(", "\"\"", ")", "arg_4", "=", "arg_22", ".", "starts_line", "if", "(", "arg_5", "and", "(", "(", "arg_5", ">", "arg_4", ")", "or", "arg_15", "and", "arg_15", ">", "arg_23", ")", ")", ":", "arg_20", "=", "arg_19", "arg_21", "=", "arg_19", "else", ":", "arg_17", "-=", "1", "arg_20", "=", "arg_1", "arg_21", "=", "arg_0", "pass", "if", "(", "(", "arg_4", ">", "arg_6", ")", "or", "(", "arg_16", "and", "arg_23", ">", "arg_16", ")", ")", ":", "break", "arg_20", "(", "format_token", "(", "Mformat", ".", "LineNumber", ",", "\"%4d\"", "%", "arg_4", ",", "arg_14", "=", "arg_14", ")", ")", "else", ":", "if", "arg_15", "and", "arg_23", "and", "arg_15", "<=", "arg_23", ":", "arg_20", "=", "arg_1", "arg_21", "=", "arg_0", "pass", "arg_20", "(", "'    '", ")", "if", "arg_23", "==", "arg_3", ":", "arg_20", "(", "format_token", "(", "Mformat", ".", "Arrow", ",", "'-->'", ",", "arg_14", "=", "arg_14", ")", ")", "else", ":", "arg_20", "(", "'   '", ")", "if", "arg_23", "in", "arg_18", ":", "arg_20", "(", "format_token", "(", "Mformat", ".", "Arrow", ",", "'>>'", ",", "arg_14", "=", "arg_14", ")", ")", "else", ":", "arg_20", "(", "'  '", ")", "arg_20", "(", "repr", "(", "arg_23", ")", ".", "rjust", "(", "4", ")", ")", "arg_20", "(", "' '", ")", "arg_20", "(", "format_token", "(", "Mformat", ".", "Opcode", ",", "arg_22", ".", "opname", ".", "ljust", "(", "20", ")", ",", "arg_14", "=", "arg_14", ")", ")", "arg_20", "(", "repr", "(", "arg_22", ".", "arg", ")", ".", "ljust", "(", "10", ")", ")", "arg_20", "(", "' '", ")", "arg_21", "(", "format_token", "(", "Mformat", ".", "Name", ",", "arg_22", ".", "argrepr", ".", "ljust", "(", "20", ")", ",", "arg_14", "=", "arg_14", ")", ")", "pass", "return", "arg_2", ",", "arg_23"], "function": "def Func(arg_0, arg_1, arg_2, arg_3=-1, arg_4=0,\n                      arg_5=-1, arg_6=None, arg_7=False,\n                      arg_8=(), arg_9=(), arg_10=(), arg_11=(),\n                      arg_12=(), arg_13={}, arg_14='light',\n                      arg_15=0, arg_16=None):\n    \"\"\"Disassemble byte string of code. If end_line is negative\n    it counts the number of statement linestarts to use.\"\"\"\n    arg_17 = 10000\n    if arg_6 is None:\n        arg_6 = 10000\n    elif arg_7:\n        arg_6 += arg_5 -1\n        pass\n\n    arg_18 = findlabels(arg_2)\n\n    arg_19 = lambda x: None\n    if arg_5 > arg_4:\n        arg_20 = arg_19\n        arg_21 = arg_19\n    else:\n        arg_20 = arg_1\n        arg_21 = arg_0\n\n    for arg_22 in get_instructions_bytes(arg_2, opc, arg_8, arg_9,\n                                        arg_10, arg_11, arg_13):\n        arg_23 = arg_22.offset\n        if arg_16 and arg_23 > arg_16:\n            break\n\n        if arg_22.starts_line:\n            if arg_23:\n                arg_21(\"\")\n\n            arg_4 = arg_22.starts_line\n            if (arg_5 and ((arg_5 > arg_4) or\n                                arg_15 and arg_15 > arg_23)) :\n                arg_20 = arg_19\n                arg_21 = arg_19\n            else:\n                arg_17 -= 1\n                arg_20 = arg_1\n                arg_21 = arg_0\n                pass\n            if ((arg_4 > arg_6) or\n                (arg_16 and arg_23 > arg_16)):\n                break\n            arg_20(format_token(Mformat.LineNumber,\n                                  \"%4d\" % arg_4,\n                                  arg_14=arg_14))\n        else:\n            if arg_15 and arg_23 and arg_15 <= arg_23:\n                arg_20 = arg_1\n                arg_21 = arg_0\n                pass\n            arg_20('    ')\n\n        if arg_23 == arg_3: arg_20(format_token(Mformat.Arrow, '-->',\n                                                  arg_14=arg_14))\n        else: arg_20('   ')\n        if arg_23 in arg_18: arg_20(format_token(Mformat.Arrow, '>>',\n                                                   arg_14=arg_14))\n        else: arg_20('  ')\n        arg_20(repr(arg_23).rjust(4))\n        arg_20(' ')\n        arg_20(format_token(Mformat.Opcode,\n                              arg_22.opname.ljust(20),\n                              arg_14=arg_14))\n        arg_20(repr(arg_22.arg).ljust(10))\n        arg_20(' ')\n        # Show argval?\n        arg_21(format_token(Mformat.Name,\n                         arg_22.argrepr.ljust(20),\n                         arg_14=arg_14))\n        pass\n\n    return arg_2, arg_23", "path": "trepan/lib/disassemble.py", "identifier": "disassemble_bytes", "docstring": "Disassemble byte string of code. If end_line is negative\n    it counts the number of statement linestarts to use.", "docstring_tokens": ["Disassemble", "byte", "string", "of", "code", ".", "If", "end_line", "is", "negative", "it", "counts", "the", "number", "of", "statement", "linestarts", "to", "use", "."], "nwo": "rocky/python3-trepan", "score": 0.5717473869829166, "idx": 277469}
{"url": "https://github.com/Ex-Mente/auxi.0/blob/2dcdae74154f136f8ca58289fe5b20772f215046/auxi/tools/chemistry/thermochemistry.py#L341-L362", "sha": "2dcdae74154f136f8ca58289fe5b20772f215046", "docstring_summary": "Calculate the phase's magnetic contribution to entropy at the\n        specified temperature.", "language": "python", "parameters": "(self, T)", "return_statement": "return -R*math.log(self.beta0_mag + 1)*s", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "arg_2", "=", "arg_1", "/", "arg_0", ".", "Tc_mag", "if", "arg_2", "<=", "1.0", ":", "arg_3", "=", "1", "-", "(", "arg_0", ".", "_B_mag", "*", "(", "2", "*", "arg_2", "**", "3", "/", "3", "+", "2", "*", "arg_2", "**", "9", "/", "27", "+", "2", "*", "arg_2", "**", "15", "/", "75", ")", ")", "/", "arg_0", ".", "_D_mag", "else", ":", "arg_3", "=", "(", "2", "*", "arg_2", "**", "-", "5", "/", "5", "+", "2", "*", "arg_2", "**", "-", "15", "/", "45", "+", "2", "*", "arg_2", "**", "-", "25", "/", "125", ")", "/", "arg_0", ".", "_D_mag", "return", "-", "R", "*", "math", ".", "log", "(", "arg_0", ".", "beta0_mag", "+", "1", ")", "*", "arg_3"], "function": "def Func(arg_0, arg_1):\n        \"\"\"\n        Calculate the phase's magnetic contribution to entropy at the\n        specified temperature.\n\n        :param T: [K] temperature\n\n        :returns: [J/mol/K] The magnetic entropy of the compound phase.\n\n        Dinsdale, A. T. (1991). SGTE data for pure elements. Calphad, 15(4),\n        317\u2013425. http://doi.org/10.1016/0364-5916(91)90030-N\n        \"\"\"\n\n        arg_2 = arg_1 / arg_0.Tc_mag\n\n        if arg_2 <= 1.0:\n            arg_3 = 1 - (arg_0._B_mag*(2*arg_2**3/3 + 2*arg_2**9/27 + 2*arg_2**15/75)) / \\\n                arg_0._D_mag\n        else:\n            arg_3 = (2*arg_2**-5/5 + 2*arg_2**-15/45 + 2*arg_2**-25/125)/arg_0._D_mag\n\n        return -R*math.log(arg_0.beta0_mag + 1)*arg_3", "path": "auxi/tools/chemistry/thermochemistry.py", "identifier": "Phase.S_mag", "docstring": "Calculate the phase's magnetic contribution to entropy at the\n        specified temperature.\n\n        :param T: [K] temperature\n\n        :returns: [J/mol/K] The magnetic entropy of the compound phase.\n\n        Dinsdale, A. T. (1991). SGTE data for pure elements. Calphad, 15(4),\n        317\u2013425. http://doi.org/10.1016/0364-5916(91)90030-N", "docstring_tokens": ["Calculate", "the", "phase", "s", "magnetic", "contribution", "to", "entropy", "at", "the", "specified", "temperature", "."], "nwo": "Ex-Mente/auxi.0", "score": 0.2778869743536733, "idx": 272332}
