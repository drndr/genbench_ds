{"url": "https://github.com/ndrlslz/ternya/blob/c05aec10029e645d63ff04313dbcf2644743481f/ternya/annotation.py#L82-L108", "sha": "c05aec10029e645d63ff04313dbcf2644743481f", "docstring_summary": "Cinder annotation for adding function to process cinder notification.", "language": "python", "parameters": "(*arg)", "return_statement": "return decorator", "argument_list": "", "function_tokens": ["def", "Func", "(", "*", "arg_0", ")", ":", "check_event_type", "(", "Openstack", ".", "Cinder", ",", "*", "arg_0", ")", "arg_1", "=", "arg_0", "[", "0", "]", "def", "decorator", "(", "arg_2", ")", ":", "if", "arg_1", ".", "find", "(", "\"*\"", ")", "!=", "-", "1", ":", "arg_3", "=", "pre_compile", "(", "arg_1", ")", "arg_4", "[", "arg_3", "]", "=", "arg_2", "else", ":", "arg_5", "[", "arg_1", "]", "=", "arg_2", "log", ".", "info", "(", "\"add function {0} to process event_type:{1}\"", ".", "format", "(", "arg_2", ".", "__name__", ",", "arg_1", ")", ")", "@", "functools", ".", "wraps", "(", "arg_2", ")", "def", "wrapper", "(", "*", "arg_6", ",", "**", "arg_7", ")", ":", "arg_2", "(", "*", "arg_6", ",", "**", "arg_7", ")", "return", "wrapper", "return", "decorator"], "function": "def Func(*arg_0):\n    \"\"\"\n    Cinder annotation for adding function to process Func notification.\n\n    if event_type include wildcard, will put {pattern: function} into process_wildcard dict\n    else will put {event_type: function} into process dict\n\n    :param arg: event_type of notification\n    \"\"\"\n    check_event_type(Openstack.Cinder, *arg_0)\n    arg_1 = arg_0[0]\n\n    def decorator(arg_2):\n        if arg_1.find(\"*\") != -1:\n            arg_3 = pre_compile(arg_1)\n            arg_4[arg_3] = arg_2\n        else:\n            arg_5[arg_1] = arg_2\n        log.info(\"add function {0} to process event_type:{1}\".format(arg_2.__name__, arg_1))\n\n        @functools.wraps(arg_2)\n        def wrapper(*arg_6, **arg_7):\n            arg_2(*arg_6, **arg_7)\n\n        return wrapper\n\n    return decorator", "path": "ternya/annotation.py", "identifier": "cinder", "docstring": "Cinder annotation for adding function to process cinder notification.\n\n    if event_type include wildcard, will put {pattern: function} into process_wildcard dict\n    else will put {event_type: function} into process dict\n\n    :param arg: event_type of notification", "docstring_tokens": ["Cinder", "annotation", "for", "adding", "function", "to", "process", "cinder", "notification", "."], "nwo": "ndrlslz/ternya", "score": 0.09252797783733271, "idx": 266011}
{"url": "https://github.com/ungarj/mapchete/blob/d482918d0e66a5b414dff6aa7cc854e01fc60ee4/mapchete/_core.py#L923-L932", "sha": "d482918d0e66a5b414dff6aa7cc854e01fc60ee4", "docstring_summary": "Determine zoom levels.", "language": "python", "parameters": "(zoom, process)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "if", "arg_0", "is", "None", ":", "return", "reversed", "(", "arg_1", ".", "config", ".", "zoom_levels", ")", "if", "isinstance", "(", "arg_0", ",", "int", ")", ":", "return", "[", "arg_0", "]", "elif", "len", "(", "arg_0", ")", "==", "2", ":", "return", "reversed", "(", "range", "(", "min", "(", "arg_0", ")", ",", "max", "(", "arg_0", ")", "+", "1", ")", ")", "elif", "len", "(", "arg_0", ")", "==", "1", ":", "return", "arg_0"], "function": "def Func(arg_0, arg_1):\n    \"\"\"Determine zoom levels.\"\"\"\n    if arg_0 is None:\n        return reversed(arg_1.config.zoom_levels)\n    if isinstance(arg_0, int):\n        return [arg_0]\n    elif len(arg_0) == 2:\n        return reversed(range(min(arg_0), max(arg_0)+1))\n    elif len(arg_0) == 1:\n        return arg_0", "path": "mapchete/_core.py", "identifier": "_get_zoom_level", "docstring": "Determine zoom levels.", "docstring_tokens": ["Determine", "zoom", "levels", "."], "nwo": "ungarj/mapchete", "score": 0.5734506828600171, "idx": 274465}
{"url": "https://github.com/nir0s/jocker/blob/b03c78adeb59ac836b388e4a7f14337d834c4b71/jocker/logger.py#L42-L80", "sha": "b03c78adeb59ac836b388e4a7f14337d834c4b71", "docstring_summary": "initializes a base logger", "language": "python", "parameters": "(base_level=DEFAULT_BASE_LOGGING_LEVEL,\n         verbose_level=DEFAULT_VERBOSE_LOGGING_LEVEL,\n         logging_config=None)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", "=", "arg_1", ",", "arg_2", "=", "arg_3", ",", "arg_4", "=", "None", ")", ":", "if", "arg_4", "is", "None", ":", "arg_4", "=", "{", "}", "arg_4", "=", "arg_4", "or", "LOGGER", "arg_5", "=", "LOGGER", "[", "'handlers'", "]", "[", "'file'", "]", "[", "'filename'", "]", "arg_6", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "expanduser", "(", "arg_5", ")", ")", "if", "os", ".", "path", ".", "isfile", "(", "arg_6", ")", ":", "sys", ".", "exit", "(", "'file {0} exists - log directory cannot be created '", "'there. please remove the file and try again.'", ".", "format", "(", "arg_6", ")", ")", "try", ":", "if", "not", "os", ".", "path", ".", "exists", "(", "arg_6", ")", "and", "not", "len", "(", "arg_6", ")", "==", "0", ":", "os", ".", "makedirs", "(", "arg_6", ")", "dictconfig", ".", "dictConfig", "(", "arg_4", ")", "arg_7", "=", "logging", ".", "getLogger", "(", "'user'", ")", "arg_7", ".", "setLevel", "(", "arg_0", ")", "return", "arg_7", "except", "ValueError", "as", "e", ":", "sys", ".", "exit", "(", "'could not Funcialize logger.'", "' verify your logger config'", "' and permissions to write to {0} ({1})'", ".", "format", "(", "arg_5", ",", "e", ")", ")"], "function": "def Func(arg_0=arg_1,\n         arg_2=arg_3,\n         arg_4=None):\n    \"\"\"Funcializes a base logger\n\n    you can use this to Func a logger in any of your files.\n    this will use config.py's LOGGER param and logging.dictConfig to configure\n    the logger for you.\n\n    :param int|logging.LEVEL base_level: desired base logging level\n    :param int|logging.LEVEL verbose_level: desired verbose logging level\n    :param dict logging_dict: dictConfig based configuration.\n     used to override the default configuration from config.py\n    :rtype: `python logger`\n    \"\"\"\n    if arg_4 is None:\n        arg_4 = {}\n    arg_4 = arg_4 or LOGGER\n    # TODO: (IMPRV) only perform file related actions if file handler is\n    # TODO: (IMPRV) defined.\n\n    arg_5 = LOGGER['handlers']['file']['filename']\n    arg_6 = os.path.dirname(os.path.expanduser(arg_5))\n    if os.path.isfile(arg_6):\n        sys.exit('file {0} exists - log directory cannot be created '\n                 'there. please remove the file and try again.'\n                 .format(arg_6))\n    try:\n        if not os.path.exists(arg_6) and not len(arg_6) == 0:\n            os.makedirs(arg_6)\n        dictconfig.dictConfig(arg_4)\n        arg_7 = logging.getLogger('user')\n        arg_7.setLevel(arg_0)\n        return arg_7\n    except ValueError as e:\n        sys.exit('could not Funcialize logger.'\n                 ' verify your logger config'\n                 ' and permissions to write to {0} ({1})'\n                 .format(arg_5, e))", "path": "jocker/logger.py", "identifier": "init", "docstring": "initializes a base logger\n\n    you can use this to init a logger in any of your files.\n    this will use config.py's LOGGER param and logging.dictConfig to configure\n    the logger for you.\n\n    :param int|logging.LEVEL base_level: desired base logging level\n    :param int|logging.LEVEL verbose_level: desired verbose logging level\n    :param dict logging_dict: dictConfig based configuration.\n     used to override the default configuration from config.py\n    :rtype: `python logger`", "docstring_tokens": ["initializes", "a", "base", "logger"], "nwo": "nir0s/jocker", "score": 0.1878804938561529, "idx": 261671}
{"url": "https://github.com/ElevenPaths/AtomShields/blob/e75f25393b4a7a315ec96bf9b8e654cb2200866a/atomshields/checkers/base.py#L161-L177", "sha": "e75f25393b4a7a315ec96bf9b8e654cb2200866a", "docstring_summary": "Parse the config values", "language": "python", "parameters": "(cls, value)", "return_statement": "return value", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "if", "'enabled'", "in", "arg_1", ":", "arg_1", "[", "'enabled'", "]", "=", "bool", "(", "arg_1", "[", "'enabled'", "]", ")", "if", "'exclude_paths'", "in", "arg_1", ":", "arg_1", "[", "'exclude_paths'", "]", "=", "[", "n", ".", "strip", "(", ")", "for", "n", "in", "ast", ".", "literal_eval", "(", "arg_1", "[", "'exclude_paths'", "]", ")", "]", "return", "arg_1"], "function": "def Func(arg_0, arg_1):\n\t\t\"\"\"\n\t\tParse the config values\n\n\t\tArgs:\n\t\t\tvalue (dict): Dictionary which contains the checker config\n\n\t\tReturns:\n\t\t\tdict: The checker config with parsed values\n\t\t\"\"\"\n\t\tif 'enabled' in arg_1:\n\t\t\targ_1['enabled'] = bool(arg_1['enabled'])\n\n\t\tif 'exclude_paths' in arg_1:\n\t\t\targ_1['exclude_paths'] = [n.strip() for n in ast.literal_eval(arg_1['exclude_paths'])]\n\n\t\treturn arg_1", "path": "atomshields/checkers/base.py", "identifier": "GenericChecker.parseConfig", "docstring": "Parse the config values\n\n\t\tArgs:\n\t\t\tvalue (dict): Dictionary which contains the checker config\n\n\t\tReturns:\n\t\t\tdict: The checker config with parsed values", "docstring_tokens": ["Parse", "the", "config", "values"], "nwo": "ElevenPaths/AtomShields", "score": 0.3901382355567912, "idx": 275984}
{"url": "https://github.com/joelfrederico/SciSalt/blob/7bf57c49c7dde0a8b0aa337fbd2fbd527ce7a67f/scisalt/facettools/logbookForm.py#L328-L337", "sha": "7bf57c49c7dde0a8b0aa337fbd2fbd527ce7a67f", "docstring_summary": "Parse xml elements for pretty printing", "language": "python", "parameters": "(self, elem)", "return_statement": "return parsedString[1:]", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "from", "xml", ".", "etree", "import", "ElementTree", "from", "re", "import", "sub", "arg_2", "=", "ElementTree", ".", "tostring", "(", "arg_1", ",", "'utf-8'", ")", "arg_3", "=", "sub", "(", "r'(?=<[^/].*>)'", ",", "'\\n'", ",", "arg_2", ")", "return", "arg_3", "[", "1", ":", "]"], "function": "def Func(arg_0, arg_1):\n        \"\"\"Parse xml elements for pretty printing\"\"\"\n        \n        from xml.etree import ElementTree\n        from re import sub\n        \n        arg_2 = ElementTree.tostring(arg_1, 'utf-8')\n        arg_3 = sub(r'(?=<[^/].*>)', '\\n', arg_2)  # Adds newline after each closing tag\n        \n        return arg_3[1:]", "path": "scisalt/facettools/logbookForm.py", "identifier": "logbookForm.prettify", "docstring": "Parse xml elements for pretty printing", "docstring_tokens": ["Parse", "xml", "elements", "for", "pretty", "printing"], "nwo": "joelfrederico/SciSalt", "score": 0.09252797783733271, "idx": 277255}
{"url": "https://github.com/Clinical-Genomics/scout/blob/90a551e2e1653a319e654c2405c2866f93d0ebb9/scout/build/acmg.py#L3-L46", "sha": "90a551e2e1653a319e654c2405c2866f93d0ebb9", "docstring_summary": "Build a evaluation object ready to be inserted to database", "language": "python", "parameters": "(variant_specific, variant_id, user_id, user_name,\n                     institute_id, case_id, classification, criteria)", "return_statement": "return evaluation_obj", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ",", "arg_2", ",", "arg_3", ",", "arg_4", ",", "arg_5", ",", "arg_6", ",", "arg_7", ")", ":", "arg_7", "=", "arg_7", "or", "[", "]", "arg_8", "=", "dict", "(", "arg_0", "=", "arg_0", ",", "arg_1", "=", "arg_1", ",", "arg_4", "=", "arg_4", ",", "arg_5", "=", "arg_5", ",", "arg_6", "=", "arg_6", ",", "arg_2", "=", "arg_2", ",", "arg_3", "=", "arg_3", ",", "created_at", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ",", ")", "arg_9", "=", "[", "]", "for", "arg_10", "in", "arg_7", ":", "arg_11", "=", "{", "}", "arg_11", "[", "'term'", "]", "=", "arg_10", "[", "'term'", "]", "if", "'comment'", "in", "arg_10", ":", "arg_11", "[", "'comment'", "]", "=", "arg_10", "[", "'comment'", "]", "if", "'links'", "in", "arg_10", ":", "arg_11", "[", "'links'", "]", "=", "arg_10", "[", "'links'", "]", "arg_9", ".", "append", "(", "arg_11", ")", "arg_8", "[", "'criteria'", "]", "=", "arg_9", "return", "arg_8"], "function": "def Func(arg_0, arg_1, arg_2, arg_3,\n                     arg_4, arg_5, arg_6, arg_7):\n    \"\"\"Build a evaluation object ready to be inserted to database\n\n    Args:\n        variant_specific(str): md5 string for the specific variant\n        variant_id(str): md5 string for the common variant\n        user_id(str)\n        user_name(str)\n        institute_id(str)\n        case_id(str)\n        classification(str): The ACMG classification\n        criteria(list(dict)): A list of dictionaries with ACMG criterias\n\n    Returns:\n        evaluation_obj(dict): Correctly formatted evaluation object\n\n    \"\"\"\n    arg_7 = arg_7 or []\n    arg_8 = dict(\n        arg_0 = arg_0,\n        arg_1 = arg_1,\n        arg_4 = arg_4,\n        arg_5 = arg_5,\n        arg_6 = arg_6,\n        arg_2 = arg_2,\n        arg_3 = arg_3,\n        created_at = datetime.datetime.now(),\n    )\n    arg_9 = []\n    for arg_10 in arg_7:\n        arg_11 = {}\n        # This allways has to exist\n        # We might want to check if the term is valid here...\n        arg_11['term'] = arg_10['term']\n        if 'comment' in arg_10:\n            arg_11['comment'] = arg_10['comment']\n        if 'links' in arg_10:\n            arg_11['links'] = arg_10['links']\n        arg_9.append(arg_11)\n\n    arg_8['criteria'] = arg_9\n\n    return arg_8", "path": "scout/build/acmg.py", "identifier": "build_evaluation", "docstring": "Build a evaluation object ready to be inserted to database\n\n    Args:\n        variant_specific(str): md5 string for the specific variant\n        variant_id(str): md5 string for the common variant\n        user_id(str)\n        user_name(str)\n        institute_id(str)\n        case_id(str)\n        classification(str): The ACMG classification\n        criteria(list(dict)): A list of dictionaries with ACMG criterias\n\n    Returns:\n        evaluation_obj(dict): Correctly formatted evaluation object", "docstring_tokens": ["Build", "a", "evaluation", "object", "ready", "to", "be", "inserted", "to", "database"], "nwo": "Clinical-Genomics/scout", "score": 0.41124813484918504, "idx": 266006}
{"url": "https://github.com/wangwenpei/fantasy/blob/0fe92059bd868f14da84235beb05b217b1d46e4a/fantasy/utils.py#L29-L38", "sha": "0fe92059bd868f14da84235beb05b217b1d46e4a", "docstring_summary": "Get a Flask-Security configuration value.", "language": "python", "parameters": "(key, app=None, default=None, prefix='hive_')", "return_statement": "return get_config(app, prefix=prefix).get(key.upper(), default)", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", "=", "None", ",", "arg_2", "=", "None", ",", "arg_3", "=", "'hive_'", ")", ":", "arg_1", "=", "arg_1", "or", "current_app", "return", "get_config", "(", "arg_1", ",", "arg_3", "=", "arg_3", ")", ".", "get", "(", "arg_0", ".", "upper", "(", ")", ",", "arg_2", ")"], "function": "def Func(arg_0, arg_1=None, arg_2=None, arg_3='hive_'):\n    \"\"\"Get a Flask-Security configuration value.\n\n    :param key: The configuration key without the prefix `SECURITY_`\n    :param app: An optional specific application to inspect. Defaults to\n                Flask's `current_app`\n    :param default: An optional default value if the value is not set\n    \"\"\"\n    arg_1 = arg_1 or current_app\n    return get_config(arg_1, arg_3=arg_3).get(arg_0.upper(), arg_2)", "path": "fantasy/utils.py", "identifier": "config_value", "docstring": "Get a Flask-Security configuration value.\n\n    :param key: The configuration key without the prefix `SECURITY_`\n    :param app: An optional specific application to inspect. Defaults to\n                Flask's `current_app`\n    :param default: An optional default value if the value is not set", "docstring_tokens": ["Get", "a", "Flask", "-", "Security", "configuration", "value", "."], "nwo": "wangwenpei/fantasy", "score": 0.3612700942909669, "idx": 265009}
{"url": "https://github.com/evonove/django-stored-messages/blob/23b71f952d5d3fd03285f5e700879d05796ef7ba/stored_messages/api.py#L12-L28", "sha": "23b71f952d5d3fd03285f5e700879d05796ef7ba", "docstring_summary": "Send a message to a list of users without passing through `django.contrib.messages`", "language": "python", "parameters": "(users, level, message_text, extra_tags='', date=None, url=None, fail_silently=False)", "return_statement": "", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ",", "arg_2", ",", "arg_3", "=", "''", ",", "arg_4", "=", "None", ",", "arg_5", "=", "None", ",", "arg_6", "=", "False", ")", ":", "arg_7", "=", "stored_messages_settings", ".", "STORAGE_BACKEND", "arg_8", "=", "arg_7", "(", ")", "arg_9", "=", "arg_8", ".", "create_message", "(", "arg_1", ",", "arg_2", ",", "arg_3", ",", "arg_4", ",", "arg_5", ")", "arg_8", ".", "archive_store", "(", "arg_0", ",", "arg_9", ")", "arg_8", ".", "inbox_store", "(", "arg_0", ",", "arg_9", ")"], "function": "def Func(arg_0, arg_1, arg_2, arg_3='', arg_4=None, arg_5=None, arg_6=False):\n    \"\"\"\n    Send a message to a list of users without passing through `django.contrib.messages`\n\n    :param users: an iterable containing the recipients of the messages\n    :param level: message level\n    :param message_text: the string containing the message\n    :param extra_tags: like the Django api, a string containing extra tags for the message\n    :param date: a date, different than the default timezone.now\n    :param url: an optional url\n    :param fail_silently: not used at the moment\n    \"\"\"\n    arg_7 = stored_messages_settings.STORAGE_BACKEND\n    arg_8 = arg_7()\n    arg_9 = arg_8.create_message(arg_1, arg_2, arg_3, arg_4, arg_5)\n    arg_8.archive_store(arg_0, arg_9)\n    arg_8.inbox_store(arg_0, arg_9)", "path": "stored_messages/api.py", "identifier": "add_message_for", "docstring": "Send a message to a list of users without passing through `django.contrib.messages`\n\n    :param users: an iterable containing the recipients of the messages\n    :param level: message level\n    :param message_text: the string containing the message\n    :param extra_tags: like the Django api, a string containing extra tags for the message\n    :param date: a date, different than the default timezone.now\n    :param url: an optional url\n    :param fail_silently: not used at the moment", "docstring_tokens": ["Send", "a", "message", "to", "a", "list", "of", "users", "without", "passing", "through", "django", ".", "contrib", ".", "messages"], "nwo": "evonove/django-stored-messages", "score": 0.18816089823412419, "idx": 263041}
{"url": "https://github.com/its-rigs/Trolly/blob/483dc94c352df40dc05ead31820b059b2545cf82/trolly/card.py#L168-L182", "sha": "483dc94c352df40dc05ead31820b059b2545cf82", "docstring_summary": "Add a member to this card. Returns a list of Member objects.", "language": "python", "parameters": "(self, member_id)", "return_statement": "return members_list", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ")", ":", "arg_2", "=", "arg_0", ".", "fetch_json", "(", "uri_path", "=", "arg_0", ".", "base_uri", "+", "'/idMembers'", ",", "http_method", "=", "'POST'", ",", "query_params", "=", "{", "'value'", ":", "arg_1", "}", ")", "arg_3", "=", "[", "]", "for", "arg_4", "in", "arg_2", ":", "arg_3", ".", "append", "(", "arg_0", ".", "create_member", "(", "arg_4", ")", ")", "return", "arg_3"], "function": "def Func(arg_0, arg_1):\n        '''\n        Add a member to this card. Returns a list of Member objects.\n        '''\n        arg_2 = arg_0.fetch_json(\n            uri_path=arg_0.base_uri + '/idMembers',\n            http_method='POST',\n            query_params={'value': arg_1}\n        )\n\n        arg_3 = []\n        for arg_4 in arg_2:\n            arg_3.append(arg_0.create_member(arg_4))\n\n        return arg_3", "path": "trolly/card.py", "identifier": "Card.add_member", "docstring": "Add a member to this card. Returns a list of Member objects.", "docstring_tokens": ["Add", "a", "member", "to", "this", "card", ".", "Returns", "a", "list", "of", "Member", "objects", "."], "nwo": "its-rigs/Trolly", "score": 0.28433842921098695, "idx": 265302}
{"url": "https://github.com/google/grumpy/blob/3ec87959189cfcdeae82eb68a47648ac25ceb10b/third_party/stdlib/quopri.py#L21-L33", "sha": "3ec87959189cfcdeae82eb68a47648ac25ceb10b", "docstring_summary": "Decide whether a particular character needs to be quoted.", "language": "python", "parameters": "(c, quotetabs, header)", "return_statement": "return c == ESCAPE or not (' ' <= c <= '~')", "argument_list": "", "function_tokens": ["def", "Func", "(", "arg_0", ",", "arg_1", ",", "arg_2", ")", ":", "if", "arg_0", "in", "' \\t'", ":", "return", "arg_1", "if", "arg_0", "==", "'_'", ":", "return", "arg_2", "return", "arg_0", "==", "ESCAPE", "or", "not", "(", "' '", "<=", "arg_0", "<=", "'~'", ")"], "function": "def Func(arg_0, arg_1, arg_2):\n    \"\"\"Decide whether a particular character needs to be quoted.\n\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    \"\"\"\n    if arg_0 in ' \\t':\n        return arg_1\n    # if header, we have to escape _ because _ is used to escape space\n    if arg_0 == '_':\n        return arg_2\n    return arg_0 == ESCAPE or not (' ' <= arg_0 <= '~')", "path": "third_party/stdlib/quopri.py", "identifier": "needsquoting", "docstring": "Decide whether a particular character needs to be quoted.\n\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.", "docstring_tokens": ["Decide", "whether", "a", "particular", "character", "needs", "to", "be", "quoted", "."], "nwo": "google/grumpy", "score": 0.9826819915211343, "idx": 266159}
