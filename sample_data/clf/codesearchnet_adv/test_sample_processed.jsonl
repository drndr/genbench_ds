{"code": "def Func ( arg_0 ) : try : arg_0 . tag = arg_0 . tag . split ( '}' ) [ 1 ] except IndexError : pass for arg_2 in arg_0 . getchildren ( ) : Func ( arg_2 )", "docstring": "Strip out namespace data from an ElementTree .", "idx": 273976}
{"code": "def Func ( ) : configure_service ( 'capture.admin' ) arg_0 = 'idle' if get_service_status ( db . Service . SCHEDULE ) == db . ServiceStatus . STOPPED : arg_0 = 'offline' elif get_service_status ( db . Service . CAPTURE ) == db . ServiceStatus . BUSY : arg_0 = 'capturing' elif get_service_status ( db . Service . INGEST ) == db . ServiceStatus . BUSY : arg_0 = 'uploading' register_ca ( arg_0 = arg_0 )", "docstring": "Update the current agent state in opencast .", "idx": 268664}
{"code": "def Func ( arg_0 , arg_1 , arg_2 ) : if arg_1 not in arg_0 . names : return arg_0 . unknown_value arg_3 , arg_4 = ( 0 , 0 ) arg_5 = arg_0 . names [ arg_1 ] . keys ( ) [ 0 ] for arg_6 , arg_7 in arg_0 . names [ arg_1 ] . items ( ) : arg_8 , arg_9 = arg_2 ( arg_7 ) if arg_8 > arg_3 or ( arg_8 == arg_3 and arg_9 > arg_4 ) : arg_3 , arg_4 , arg_5 = arg_8 , arg_9 , arg_6 return arg_5 if arg_3 > 0 else arg_0 . unknown_value", "docstring": "Finds the most popular gender for the given name counting by given counter", "idx": 265551}
{"code": "def Func ( arg_0 ) : try : arg_1 = pool_api . Func ( arg_0 = arg_0 ) except AirflowException as err : _log . error ( err ) arg_2 = jsonify ( error = \"{}\" . format ( err ) ) arg_2 . status_code = err . status_code return arg_2 else : return jsonify ( arg_1 . to_json ( ) )", "docstring": "Delete pool .", "idx": 277549}
{"code": "def Func ( arg_0 , arg_1 , arg_2 , arg_3 ) : arg_4 = arg_0 . _unique_constraint_name ( arg_1 . _meta . db_table , arg_2 , arg_3 ) arg_5 = [ '(%s->\\'%s\\')' % ( arg_2 . column , key ) for key in arg_3 ] arg_6 = arg_0 . sql_hstore_unique_create . format ( arg_4 = arg_0 . quote_name ( arg_4 ) , table = arg_0 . quote_name ( arg_1 . _meta . db_table ) , arg_5 = ',' . join ( arg_5 ) ) arg_0 . execute ( arg_6 )", "docstring": "Creates a UNIQUE constraint for the specified hstore keys .", "idx": 261674}
{"code": "def Func ( arg_0 ) : arg_1 = arg_0 [ 0 ] arg_2 , arg_3 = arg_0 [ 1 ] , arg_0 [ 2 ] arg_4 = arg_0 [ 3 ] arg_5 = range ( arg_0 [ 4 ] ) arg_6 = arg_0 [ 5 ] arg_7 = arg_0 [ 6 ] arg_8 = arg_0 [ 7 ] try : arg_9 = 1.0 / arg_1 arg_10 = phase_magseries ( arg_2 , arg_3 , arg_9 , arg_4 , wrap = False , sort = True ) if arg_8 is not None and arg_8 > 0 : arg_11 = pwd_phasebin ( arg_10 [ 'phase' ] , arg_10 [ 'mags' ] , binsize = arg_8 ) arg_12 = arg_11 [ 0 ] arg_13 = arg_11 [ 1 ] arg_5 = range ( len ( arg_13 ) - 1 ) else : arg_12 = arg_10 [ 'phase' ] arg_13 = arg_10 [ 'mags' ] arg_14 = nproll ( arg_13 , 1 ) arg_15 = nproll ( arg_12 , 1 ) arg_16 = ( ( arg_14 - arg_13 ) * ( arg_14 - arg_13 ) + ( arg_15 - arg_12 ) * ( arg_15 - arg_12 ) ) arg_16 [ 0 ] = ( ( ( arg_13 [ 0 ] - arg_13 [ - 1 ] ) * ( arg_13 [ 0 ] - arg_13 [ - 1 ] ) ) + ( ( arg_12 [ 0 ] - arg_12 [ - 1 ] + 1 ) * ( arg_12 [ 0 ] - arg_12 [ - 1 ] + 1 ) ) ) arg_17 = npsum ( npsqrt ( arg_16 ) ) if ( arg_6 < arg_17 < arg_7 ) : arg_18 = True else : arg_18 = False return ( arg_9 , arg_17 , arg_18 ) except Exception as e : LOGEXCEPTION ( 'error in DWP' ) return ( arg_9 , npnan , False )", "docstring": "This is the parallel worker for the function below .", "idx": 261468}
{"code": "def Func ( arg_0 , arg_1 ) : arg_0 . _start ( ) arg_2 = arg_0 . _new_pattern_collection ( ) arg_0 . _fill_pattern_collection ( arg_2 , arg_1 ) arg_0 . _create_pattern_set ( arg_2 , arg_1 ) return arg_0 . _pattern_set", "docstring": "Parse a knitting pattern set .", "idx": 273832}
{"code": "def Func ( arg_0 = None ) : if arg_0 == 'redbaron' or os . environ . get ( 'GETGAUGE_USE_0_3_3_PARSER' ) : arg_1 . Class = RedbaronPythonFile else : arg_1 . Class = ParsoPythonFile", "docstring": "Select default parser for loading and refactoring steps . Passing redbaron as argument will select the old paring engine from v0 . 3 . 3", "idx": 267944}
{"code": "def Func ( arg_0 , arg_1 ) : if six . callable ( arg_1 ) : return arg_1 ( arg_0 ) elif ( isinstance ( arg_1 , six . string_types ) and isinstance ( arg_0 , six . string_types ) ) : return re . match ( arg_1 , arg_0 ) is not None else : return arg_1 == arg_0", "docstring": "Test if a string matches a query .", "idx": 263983}
{"code": "def Func ( arg_0 , arg_1 , arg_2 = 'hann' , arg_3 = 2.0 , arg_4 = None , arg_5 = 7 , arg_6 = False , arg_7 = True , ** arg_8 ) : if arg_4 is None : arg_4 = 1. / arg_3 elif arg_4 > arg_3 : raise ParameterError ( 'min_ratio={} cannot exceed max_ratio={}' . format ( arg_4 , arg_3 ) ) arg_9 = None for arg_10 in np . logspace ( np . log2 ( arg_4 ) , np . log2 ( arg_3 ) , num = arg_5 , base = 2 ) : arg_11 = diagonal_filter ( arg_2 , arg_1 , slope = arg_10 , arg_6 = arg_6 ) if arg_9 is None : arg_9 = scipy . ndimage . convolve ( arg_0 , arg_11 , ** arg_8 ) else : np . maximum ( arg_9 , scipy . ndimage . convolve ( arg_0 , arg_11 , ** arg_8 ) , out = arg_9 ) if arg_7 : np . clip ( arg_9 , 0 , None , out = arg_9 ) return arg_9", "docstring": "Multi - angle path enhancement for self - and cross - similarity matrices .", "idx": 262574}
