{"code": "def Func ( * arg_0 ) : check_event_type ( Openstack . Cinder , * arg_0 ) arg_1 = arg_0 [ 0 ] def decorator ( arg_2 ) : if arg_1 . find ( \"*\" ) != - 1 : arg_3 = pre_compile ( arg_1 ) arg_4 [ arg_3 ] = arg_2 else : arg_5 [ arg_1 ] = arg_2 log . info ( \"add function {0} to process event_type:{1}\" . format ( arg_2 . __name__ , arg_1 ) ) @ functools . wraps ( arg_2 ) def wrapper ( * arg_6 , ** arg_7 ) : arg_2 ( * arg_6 , ** arg_7 ) return wrapper return decorator", "docstring": "Cinder annotation for adding function to process cinder notification .", "idx": 266011}
{"code": "def Func ( arg_0 , arg_1 ) : if arg_0 is None : return reversed ( arg_1 . config . zoom_levels ) if isinstance ( arg_0 , int ) : return [ arg_0 ] elif len ( arg_0 ) == 2 : return reversed ( range ( min ( arg_0 ) , max ( arg_0 ) + 1 ) ) elif len ( arg_0 ) == 1 : return arg_0", "docstring": "Determine zoom levels .", "idx": 274465}
{"code": "def Func ( arg_0 = arg_1 , arg_2 = arg_3 , arg_4 = None ) : if arg_4 is None : arg_4 = { } arg_4 = arg_4 or LOGGER arg_5 = LOGGER [ 'handlers' ] [ 'file' ] [ 'filename' ] arg_6 = os . path . dirname ( os . path . expanduser ( arg_5 ) ) if os . path . isfile ( arg_6 ) : sys . exit ( 'file {0} exists - log directory cannot be created ' 'there. please remove the file and try again.' . format ( arg_6 ) ) try : if not os . path . exists ( arg_6 ) and not len ( arg_6 ) == 0 : os . makedirs ( arg_6 ) dictconfig . dictConfig ( arg_4 ) arg_7 = logging . getLogger ( 'user' ) arg_7 . setLevel ( arg_0 ) return arg_7 except ValueError as e : sys . exit ( 'could not Funcialize logger.' ' verify your logger config' ' and permissions to write to {0} ({1})' . format ( arg_5 , e ) )", "docstring": "initializes a base logger", "idx": 261671}
{"code": "def Func ( arg_0 , arg_1 ) : if 'enabled' in arg_1 : arg_1 [ 'enabled' ] = bool ( arg_1 [ 'enabled' ] ) if 'exclude_paths' in arg_1 : arg_1 [ 'exclude_paths' ] = [ n . strip ( ) for n in ast . literal_eval ( arg_1 [ 'exclude_paths' ] ) ] return arg_1", "docstring": "Parse the config values", "idx": 275984}
{"code": "def Func ( arg_0 , arg_1 ) : from xml . etree import ElementTree from re import sub arg_2 = ElementTree . tostring ( arg_1 , 'utf-8' ) arg_3 = sub ( r'(?=<[^/].*>)' , '\\n' , arg_2 ) return arg_3 [ 1 : ]", "docstring": "Parse xml elements for pretty printing", "idx": 277255}
{"code": "def Func ( arg_0 , arg_1 , arg_2 , arg_3 , arg_4 , arg_5 , arg_6 , arg_7 ) : arg_7 = arg_7 or [ ] arg_8 = dict ( arg_0 = arg_0 , arg_1 = arg_1 , arg_4 = arg_4 , arg_5 = arg_5 , arg_6 = arg_6 , arg_2 = arg_2 , arg_3 = arg_3 , created_at = datetime . datetime . now ( ) , ) arg_9 = [ ] for arg_10 in arg_7 : arg_11 = { } arg_11 [ 'term' ] = arg_10 [ 'term' ] if 'comment' in arg_10 : arg_11 [ 'comment' ] = arg_10 [ 'comment' ] if 'links' in arg_10 : arg_11 [ 'links' ] = arg_10 [ 'links' ] arg_9 . append ( arg_11 ) arg_8 [ 'criteria' ] = arg_9 return arg_8", "docstring": "Build a evaluation object ready to be inserted to database", "idx": 266006}
{"code": "def Func ( arg_0 , arg_1 = None , arg_2 = None , arg_3 = 'hive_' ) : arg_1 = arg_1 or current_app return get_config ( arg_1 , arg_3 = arg_3 ) . get ( arg_0 . upper ( ) , arg_2 )", "docstring": "Get a Flask - Security configuration value .", "idx": 265009}
{"code": "def Func ( arg_0 , arg_1 , arg_2 , arg_3 = '' , arg_4 = None , arg_5 = None , arg_6 = False ) : arg_7 = stored_messages_settings . STORAGE_BACKEND arg_8 = arg_7 ( ) arg_9 = arg_8 . create_message ( arg_1 , arg_2 , arg_3 , arg_4 , arg_5 ) arg_8 . archive_store ( arg_0 , arg_9 ) arg_8 . inbox_store ( arg_0 , arg_9 )", "docstring": "Send a message to a list of users without passing through django . contrib . messages", "idx": 263041}
{"code": "def Func ( arg_0 , arg_1 ) : arg_2 = arg_0 . fetch_json ( uri_path = arg_0 . base_uri + '/idMembers' , http_method = 'POST' , query_params = { 'value' : arg_1 } ) arg_3 = [ ] for arg_4 in arg_2 : arg_3 . append ( arg_0 . create_member ( arg_4 ) ) return arg_3", "docstring": "Add a member to this card . Returns a list of Member objects .", "idx": 265302}
{"code": "def Func ( arg_0 , arg_1 , arg_2 ) : if arg_0 in ' \\t' : return arg_1 if arg_0 == '_' : return arg_2 return arg_0 == ESCAPE or not ( ' ' <= arg_0 <= '~' )", "docstring": "Decide whether a particular character needs to be quoted .", "idx": 266159}
