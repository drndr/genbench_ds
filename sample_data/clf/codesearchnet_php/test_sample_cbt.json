{"input": "Detects ANSI support\n\n@return bool [SEP] protected function hasAnsi()\n    {\n        if (DIRECTORY_SEPARATOR === '\\\\') {\n            return\n                0 >= version_compare('10.0.10586',\n                    PHP_WINDOWS_VERSION_MAJOR . '.' . PHP_WINDOWS_VERSION_MINOR . '.' . PHP_WINDOWS_VERSION_BUILD)\n                || false !== getenv('ANSICON')\n                || 'ON' === getenv('ConEmuANSI')\n                || 'xterm' === getenv('TERM');\n        }\n\n        return function_exists('posix_isatty') && @posix_isatty($this->stream);\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Detects ANSI support\n\n@return bool [SEP] public function install( $args, $assoc_args ) {\n\t\tif ( $this->do_install( $assoc_args ) ) {\n\t\t\tWP_CLI::success( 'WordPress installed successfully.' );\n\t\t} else {\n\t\t\tWP_CLI::log( 'WordPress is already installed.' );\n\t\t}\n\t}", "target": 0, "target_options": [0, 1]}
{"input": "Runs the standard WordPress installation process.\n\nCreates the WordPress tables in the database using the URL, title, and\ndefault admin user details provided. Performs the famous 5 minute install\nin seconds or less.\n\nNote: if you've installed WordPress in a subdirectory, then you'll need\nto `wp option update siteurl` after `wp core install`. For instance, if\nWordPress is installed in the `/wp` directory and your domain is example.com,\nthen you'll need to run `wp option update siteurl http://example.com/wp` for\nyour WordPress installation to function properly.\n\nNote: When using custom user tables (e.g. `CUSTOM_USER_TABLE`), the admin\nemail and password are ignored if the user_login already exists. If the\nuser_login doesn't exist, a new user will be created.\n\n## OPTIONS\n\n--url=<url>\n: The address of the new site.\n\n--title=<site-title>\n: The title of the new site.\n\n--admin_user=<username>\n: The name of the admin user.\n\n[--admin_password=<password>]\n: The password for the admin user. Defaults to randomly generated string.\n\n--admin_email=<email>\n: The email address for the admin user.\n\n[--skip-email]\n: Don't send an email notification to the new admin user.\n\n## EXAMPLES\n\n# Install WordPress in 5 seconds\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\nSuccess: WordPress installed successfully.\n\n# Install WordPress without disclosing admin_password to bash history\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_email=info@example.com --prompt=admin_password < admin_password.txt [SEP] public function install( $args, $assoc_args ) {\n\t\tif ( $this->do_install( $assoc_args ) ) {\n\t\t\tWP_CLI::success( 'WordPress installed successfully.' );\n\t\t} else {\n\t\t\tWP_CLI::log( 'WordPress is already installed.' );\n\t\t}\n\t}", "target": 1, "target_options": [0, 1]}
{"input": "Runs the standard WordPress installation process.\n\nCreates the WordPress tables in the database using the URL, title, and\ndefault admin user details provided. Performs the famous 5 minute install\nin seconds or less.\n\nNote: if you've installed WordPress in a subdirectory, then you'll need\nto `wp option update siteurl` after `wp core install`. For instance, if\nWordPress is installed in the `/wp` directory and your domain is example.com,\nthen you'll need to run `wp option update siteurl http://example.com/wp` for\nyour WordPress installation to function properly.\n\nNote: When using custom user tables (e.g. `CUSTOM_USER_TABLE`), the admin\nemail and password are ignored if the user_login already exists. If the\nuser_login doesn't exist, a new user will be created.\n\n## OPTIONS\n\n--url=<url>\n: The address of the new site.\n\n--title=<site-title>\n: The title of the new site.\n\n--admin_user=<username>\n: The name of the admin user.\n\n[--admin_password=<password>]\n: The password for the admin user. Defaults to randomly generated string.\n\n--admin_email=<email>\n: The email address for the admin user.\n\n[--skip-email]\n: Don't send an email notification to the new admin user.\n\n## EXAMPLES\n\n# Install WordPress in 5 seconds\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\nSuccess: WordPress installed successfully.\n\n# Install WordPress without disclosing admin_password to bash history\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_email=info@example.com --prompt=admin_password < admin_password.txt [SEP] protected function getWordWrappedData($data, $prefix)\n    {\n        $lines = array();\n\n        do {\n            if (mb_strlen($data, '8bit') > 997) {\n                $line = $prefix . ' ' . mb_strcut($data, 0, 996, 'utf-8') . \"\\\\\\n\";\n                $lines[] = $line;\n                $lineLength = mb_strlen($line, '8bit') - 1;\n                $dataLength = mb_substr($data, '8bit');\n                $data = mb_substr(\n                    $data,\n                    $lineLength,\n                    $dataLength - $lineLength,\n                    '8bit'\n                );\n            } else {\n                $lines[] = $prefix . ' ' . $data . \"\\n\";\n                $data = '';\n            }\n        } while ($data != '');\n\n        return implode('', $lines);\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Map the previous task code to an input code\n\n@param ProcessState $state\n\n@throws \\Symfony\\Component\\OptionsResolver\\Exception\\ExceptionInterface\n@throws \\InvalidArgumentException\n@throws \\UnexpectedValueException\n\n@return string [SEP] protected function getInputCode(ProcessState $state)\n    {\n        $previousState = $state->getPreviousState();\n        $previousTaskCode = $previousState->getTaskConfiguration()->getCode();\n        $inputCodes = $this->getOption($state, 'input_codes');\n        if (!array_key_exists($previousTaskCode, $inputCodes)) {\n            throw new \\UnexpectedValueException(\"Task '{$previousTaskCode}' is not mapped in the input_codes option\");\n        }\n\n        return $inputCodes[$previousTaskCode];\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Map the previous task code to an input code\n\n@param ProcessState $state\n\n@throws \\Symfony\\Component\\OptionsResolver\\Exception\\ExceptionInterface\n@throws \\InvalidArgumentException\n@throws \\UnexpectedValueException\n\n@return string [SEP] protected function hasAnsi()\n    {\n        if (DIRECTORY_SEPARATOR === '\\\\') {\n            return\n                0 >= version_compare('10.0.10586',\n                    PHP_WINDOWS_VERSION_MAJOR . '.' . PHP_WINDOWS_VERSION_MINOR . '.' . PHP_WINDOWS_VERSION_BUILD)\n                || false !== getenv('ANSICON')\n                || 'ON' === getenv('ConEmuANSI')\n                || 'xterm' === getenv('TERM');\n        }\n\n        return function_exists('posix_isatty') && @posix_isatty($this->stream);\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Add an email to the Cc (carbon copy) header\n(multiple calls to this method are allowed)\n\n@param string $email The email direction to add\n\n@return void\n@access public [SEP] function addCc($email)\n    {\n        if (isset($this->_headers['Cc'])) {\n            $this->_headers['Cc'] .= \", $email\";\n        } else {\n            $this->_headers['Cc'] = $email;\n        }\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Add an email to the Cc (carbon copy) header\n(multiple calls to this method are allowed)\n\n@param string $email The email direction to add\n\n@return void\n@access public [SEP] public function updateCounters($counters)\n    {\n        return static::updateAllCounters($counters, $this->getOldPrimaryKey(true))->then(\n            function($count) use(&$counters) {\n                if ($count > 0) {\n                    foreach ($counters as $name => $value) {\n                        if (!isset($this->_attributes[$name])) {\n                            $this->_attributes[$name] = $value;\n                        } else {\n                            $this->_attributes[$name] += $value;\n                        }\n                        $this->_oldAttributes[$name] = $this->_attributes[$name];\n                    }\n\n                    return true;\n                }\n                throw new Error(\"Can not update counters\");\n            }\n        );\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Wraps strings at 1,000 bytes without splitting UTF-8 multibyte\ncharacters\n\nEach line is prepended with the specified line prefix. Wrapped lines\nare automatically appended with \\ characters.\n\nProtocol strings are UTF-8 but maximum line length is 1,000 bytes.\n<kbd>mb_strcut()</kbd> is used so we can limit line length by bytes\nand not split characters across multiple lines.\n\n@param string $data   the data to wrap.\n@param string $prefix a single character to use as the line prefix. For\nexample, 'D' or '#'.\n\n@return string the word-wrapped, prefixed string.\n\n@see http://www.gnupg.org/documentation/manuals/assuan/Server-responses.html [SEP] protected function getWordWrappedData($data, $prefix)\n    {\n        $lines = array();\n\n        do {\n            if (mb_strlen($data, '8bit') > 997) {\n                $line = $prefix . ' ' . mb_strcut($data, 0, 996, 'utf-8') . \"\\\\\\n\";\n                $lines[] = $line;\n                $lineLength = mb_strlen($line, '8bit') - 1;\n                $dataLength = mb_substr($data, '8bit');\n                $data = mb_substr(\n                    $data,\n                    $lineLength,\n                    $dataLength - $lineLength,\n                    '8bit'\n                );\n            } else {\n                $lines[] = $prefix . ' ' . $data . \"\\n\";\n                $data = '';\n            }\n        } while ($data != '');\n\n        return implode('', $lines);\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Wraps strings at 1,000 bytes without splitting UTF-8 multibyte\ncharacters\n\nEach line is prepended with the specified line prefix. Wrapped lines\nare automatically appended with \\ characters.\n\nProtocol strings are UTF-8 but maximum line length is 1,000 bytes.\n<kbd>mb_strcut()</kbd> is used so we can limit line length by bytes\nand not split characters across multiple lines.\n\n@param string $data   the data to wrap.\n@param string $prefix a single character to use as the line prefix. For\nexample, 'D' or '#'.\n\n@return string the word-wrapped, prefixed string.\n\n@see http://www.gnupg.org/documentation/manuals/assuan/Server-responses.html [SEP] public function handle()\n    {\n\n        $user_repository = $this->laravel->make('Tokenly\\LaravelApiProvider\\Contracts\\APIUserRepositoryContract');\n        $users = $user_repository->findAll();\n\n        foreach($users as $user) {\n            $user['password'] = '********';\n            $this->line(json_encode($user, 192));\n        }\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Updates one or several counter columns for the current AR object.\nNote that this method differs from [[updateAllCounters()]] in that it only\nsaves counters for the current AR object.\n\nAn example usage is as follows:\n\n```php\n$post = Post::findOne($id);\n$post->updateCounters(['view_count' => 1]);\n```\n\n@param array $counters the counters to be updated (attribute name => increment value)\nUse negative values if you want to decrement the counters.\n@return ExtendedPromiseInterface with bool whether the saving is successful\n@see updateAllCounters() [SEP] public function updateCounters($counters)\n    {\n        return static::updateAllCounters($counters, $this->getOldPrimaryKey(true))->then(\n            function($count) use(&$counters) {\n                if ($count > 0) {\n                    foreach ($counters as $name => $value) {\n                        if (!isset($this->_attributes[$name])) {\n                            $this->_attributes[$name] = $value;\n                        } else {\n                            $this->_attributes[$name] += $value;\n                        }\n                        $this->_oldAttributes[$name] = $this->_attributes[$name];\n                    }\n\n                    return true;\n                }\n                throw new Error(\"Can not update counters\");\n            }\n        );\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Updates one or several counter columns for the current AR object.\nNote that this method differs from [[updateAllCounters()]] in that it only\nsaves counters for the current AR object.\n\nAn example usage is as follows:\n\n```php\n$post = Post::findOne($id);\n$post->updateCounters(['view_count' => 1]);\n```\n\n@param array $counters the counters to be updated (attribute name => increment value)\nUse negative values if you want to decrement the counters.\n@return ExtendedPromiseInterface with bool whether the saving is successful\n@see updateAllCounters() [SEP] function addCc($email)\n    {\n        if (isset($this->_headers['Cc'])) {\n            $this->_headers['Cc'] .= \", $email\";\n        } else {\n            $this->_headers['Cc'] = $email;\n        }\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Execute the console command.\n\n@return mixed [SEP] public function handle()\n    {\n\n        $user_repository = $this->laravel->make('Tokenly\\LaravelApiProvider\\Contracts\\APIUserRepositoryContract');\n        $users = $user_repository->findAll();\n\n        foreach($users as $user) {\n            $user['password'] = '********';\n            $this->line(json_encode($user, 192));\n        }\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Execute the console command.\n\n@return mixed [SEP] public function prepareScopes()\n    {\n        $result = [];\n\n        foreach ($this->scopes as $key => $scope) {\n            // If no scope configuration has been provided, just make scope's name to be its alias\n            if (!is_array($scope)) {\n                $result[$scope] = ['alias' => $scope];\n                continue;\n            }\n\n            $result[$key] = $scope;\n\n            // If no alias has been provided, make it to be scope's name\n            if (!isset($scope['alias'])) {\n                $result[$key]['alias'] = $key;\n            }\n        }\n\n        return $result;\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Create an instance of the Memcached cache driver.\n\n@param array $config\n\n@return \\Cache\\Adapter\\Memcached\\MemcachedCachePool\n\n@codeCoverageIgnore [SEP] protected function createMemcachedDriver(array $config): MemcachedCachePool\n    {\n        $client = new Memcached();\n        $client->addServer($config['host'], $config['port']);\n\n        return new MemcachedCachePool($client);\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Create an instance of the Memcached cache driver.\n\n@param array $config\n\n@return \\Cache\\Adapter\\Memcached\\MemcachedCachePool\n\n@codeCoverageIgnore [SEP] public function handle()\n    {\n\n        $user_repository = $this->laravel->make('Tokenly\\LaravelApiProvider\\Contracts\\APIUserRepositoryContract');\n        $users = $user_repository->findAll();\n\n        foreach($users as $user) {\n            $user['password'] = '********';\n            $this->line(json_encode($user, 192));\n        }\n    }", "target": 0, "target_options": [0, 1]}
{"input": "Parse scope configuration passed as a second argument for applyScopes method\n\n@return array [SEP] public function prepareScopes()\n    {\n        $result = [];\n\n        foreach ($this->scopes as $key => $scope) {\n            // If no scope configuration has been provided, just make scope's name to be its alias\n            if (!is_array($scope)) {\n                $result[$scope] = ['alias' => $scope];\n                continue;\n            }\n\n            $result[$key] = $scope;\n\n            // If no alias has been provided, make it to be scope's name\n            if (!isset($scope['alias'])) {\n                $result[$key]['alias'] = $key;\n            }\n        }\n\n        return $result;\n    }", "target": 1, "target_options": [0, 1]}
{"input": "Parse scope configuration passed as a second argument for applyScopes method\n\n@return array [SEP] public function install( $args, $assoc_args ) {\n\t\tif ( $this->do_install( $assoc_args ) ) {\n\t\t\tWP_CLI::success( 'WordPress installed successfully.' );\n\t\t} else {\n\t\t\tWP_CLI::log( 'WordPress is already installed.' );\n\t\t}\n\t}", "target": 0, "target_options": [0, 1]}
{"input": "set pipes, single mode.\n\n@param $pipe\n@return self\n@throws \\InvalidArgumentException [SEP] public function pipe($pipe) \n    {\n        if (FALSE === is_callable($pipe)) {\n            throw new InvalidArgumentException('pipe should be callable.');\n        }\n\n        $this->_pipes[] = $pipe;\n\n        return $this;\n    }", "target": 1, "target_options": [0, 1]}
{"input": "set pipes, single mode.\n\n@param $pipe\n@return self\n@throws \\InvalidArgumentException [SEP] protected function getWordWrappedData($data, $prefix)\n    {\n        $lines = array();\n\n        do {\n            if (mb_strlen($data, '8bit') > 997) {\n                $line = $prefix . ' ' . mb_strcut($data, 0, 996, 'utf-8') . \"\\\\\\n\";\n                $lines[] = $line;\n                $lineLength = mb_strlen($line, '8bit') - 1;\n                $dataLength = mb_substr($data, '8bit');\n                $data = mb_substr(\n                    $data,\n                    $lineLength,\n                    $dataLength - $lineLength,\n                    '8bit'\n                );\n            } else {\n                $lines[] = $prefix . ' ' . $data . \"\\n\";\n                $data = '';\n            }\n        } while ($data != '');\n\n        return implode('', $lines);\n    }", "target": 0, "target_options": [0, 1]}
