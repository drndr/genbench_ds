{"input": "Return the {@link javax.xml.stream.XMLEventWriter} for the given StAX Result.\n\n@param result a JAXP 1.4 {@link javax.xml.transform.stax.StAXResult}\n@return the {@link javax.xml.stream.XMLStreamReader}\n@throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link javax.xml.transform.stax.StAXResult}\nor custom StAX Result [SEP] public static XMLEventWriter getXMLEventWriter(Result result) {\n        if (result instanceof StAXResult) {\n            return ((StAXResult) result).getXMLEventWriter();\n        } else if (result instanceof StaxResult) {\n            return ((StaxResult) result).getXMLEventWriter();\n        } else {\n            throw new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\n        }\n    }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Return the {@link javax.xml.stream.XMLEventWriter} for the given StAX Result.\n\n@param result a JAXP 1.4 {@link javax.xml.transform.stax.StAXResult}\n@return the {@link javax.xml.stream.XMLStreamReader}\n@throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link javax.xml.transform.stax.StAXResult}\nor custom StAX Result [SEP] List<SchemaElement> toParquetSchema(MessageType schema) {\n    List<SchemaElement> result = new ArrayList<SchemaElement>();\n    addToList(result, schema);\n    return result;\n  }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Gets Auth0 Normalized User Profile info.\n\n@param accessTokenParam The access token used to get\nuser profile info from.\n@return User Profile.\n\n@see NormalizedUserProfile\n@see AccessToken [SEP] public NormalizedUserProfile getUserProfileInfo(AccessToken accessTokenParam)\n    {\n        if(accessTokenParam == null || (accessTokenParam.getAccessToken() == null ||\n                accessTokenParam.getAccessToken().trim().isEmpty()))\n        {\n            throw new FluidClientException(\n                    \"Code must be provided.\",\n                    FluidClientException.ErrorCode.FIELD_VALIDATE);\n        }\n\n        try {\n            String accessToken = accessTokenParam.getAccessToken();\n\n            List<HeaderNameValue> headerListing = new ArrayList<HeaderNameValue>();\n\n            headerListing.add(new HeaderNameValue(\n                    NormalizedUserProfile.HeaderMapping.AUTHORIZATION,\n                    \"Bearer \"+accessToken));\n\n            return new NormalizedUserProfile(\n                    this.getJson(true, WS.Path.Auth0.Version1.userInfo(),headerListing));\n        }\n        //\n        catch (UnsupportedEncodingException e) {\n\n            throw new FluidClientException(\n                    \"Unable to Encode (Not Supported). \"+ e.getMessage(),\n                    FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR);\n        }\n    }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Gets Auth0 Normalized User Profile info.\n\n@param accessTokenParam The access token used to get\nuser profile info from.\n@return User Profile.\n\n@see NormalizedUserProfile\n@see AccessToken [SEP] public static MediaPacket make(MediaPacket packet, boolean copyData) {\n    long cPtr = VideoJNI.MediaPacket_make__SWIG_2(MediaPacket.getCPtr(packet), packet, copyData);\n    return (cPtr == 0) ? null : new MediaPacket(cPtr, false);\n  }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Writes the entire contents of the specified input stream to this\nbyte stream. Bytes from the input stream are read directly into the\ninternal buffers of this streams.\n\n@param in the input stream to read from\n@return total number of bytes read from the input stream\n(and written to this stream)\n@throws IOException if an I/O error occurs while reading the input stream\n@since 1.4 [SEP] public synchronized int write(InputStream in) throws IOException {\n        int readCount = 0;\n        int inBufferPos = count - filledBufferSum;\n        int n = in.read(currentBuffer, inBufferPos, currentBuffer.length - inBufferPos);\n        while (n != -1) {\n            readCount += n;\n            inBufferPos += n;\n            count += n;\n            if (inBufferPos == currentBuffer.length) {\n                needNewBuffer(currentBuffer.length);\n                inBufferPos = 0;\n            }\n            n = in.read(currentBuffer, inBufferPos, currentBuffer.length - inBufferPos);\n        }\n        return readCount;\n    }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Writes the entire contents of the specified input stream to this\nbyte stream. Bytes from the input stream are read directly into the\ninternal buffers of this streams.\n\n@param in the input stream to read from\n@return total number of bytes read from the input stream\n(and written to this stream)\n@throws IOException if an I/O error occurs while reading the input stream\n@since 1.4 [SEP] public static MediaPacket make(MediaPacket packet, boolean copyData) {\n    long cPtr = VideoJNI.MediaPacket_make__SWIG_2(MediaPacket.getCPtr(packet), packet, copyData);\n    return (cPtr == 0) ? null : new MediaPacket(cPtr, false);\n  }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Visible for testing [SEP] List<SchemaElement> toParquetSchema(MessageType schema) {\n    List<SchemaElement> result = new ArrayList<SchemaElement>();\n    addToList(result, schema);\n    return result;\n  }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Visible for testing [SEP] @Override\r\n\tpublic void persistInstance(InstanceKey instanceKey, Object instance) {\r\n\t\t// at this point key and instance arguments are guaranteed to be non null\r\n\r\n\t\tHttpSession httpSession = getSession(instanceKey);\r\n\t\thttpSession.setAttribute(instanceKey.getValue(), instance);\r\n\t}", "target": 0, "target_options": ["no_match", "match"]}
{"input": "/*\n(non-Javadoc)\n\n@see org.springframework.web.method.support.HandlerMethodArgumentResolver#\nresolveArgument (org.springframework.core.MethodParameter,\norg.springframework.web.method.support.ModelAndViewContainer,\norg.springframework.web.context.request.NativeWebRequest,\norg.springframework.web.bind.support.WebDataBinderFactory) [SEP] public Object resolveArgument(MethodParameter parameter,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest,\n\t\t\tWebDataBinderFactory binderFactory) throws Exception {\n\t\tAuthentication authentication = SecurityContextHolder.getContext()\n\t\t\t\t.getAuthentication();\n\t\tif (authentication == null) {\n\t\t\treturn null;\n\t\t}\n\t\tObject principal = authentication.getPrincipal();\n\t\tif (principal != null\n\t\t\t\t&& !parameter.getParameterType().isAssignableFrom(principal.getClass())) {\n\t\t\tAuthenticationPrincipal authPrincipal = findMethodAnnotation(\n\t\t\t\t\tAuthenticationPrincipal.class, parameter);\n\t\t\tif (authPrincipal.errorOnInvalidType()) {\n\t\t\t\tthrow new ClassCastException(principal + \" is not assignable to \"\n\t\t\t\t\t\t+ parameter.getParameterType());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn principal;\n\t}", "target": 1, "target_options": ["no_match", "match"]}
{"input": "/*\n(non-Javadoc)\n\n@see org.springframework.web.method.support.HandlerMethodArgumentResolver#\nresolveArgument (org.springframework.core.MethodParameter,\norg.springframework.web.method.support.ModelAndViewContainer,\norg.springframework.web.context.request.NativeWebRequest,\norg.springframework.web.bind.support.WebDataBinderFactory) [SEP] static synchronized public String\n  find(String key, String url) {\n    if (key == null) return null;\n    if (!initialized) RC.initialize();\n    Triple t = dfaltRC.lookup(key, url);\n    return (t == null ? null : t.value);\n  }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Transform an array class to its string representation <BR>\nexample: String[] -> [Ljava.lang.String;\n\n@param typeClass\nthe array class to transform\n@return the String representation of the class [SEP] public static String toArray(CtClass typeClass) {\r\n\t\tStringTokenizer st = new StringTokenizer(typeClass.getName(), \"[\");\r\n\t\tString name = null;\r\n\t\tCtClass arrayClass;\r\n\t\ttry {\r\n\t\t\tarrayClass = typeClass.getComponentType();\r\n\t\t\tif (!arrayClass.isPrimitive())\r\n\t\t\t\tname = \"L\" + arrayClass.getName().replace('/', '.') + \";\";\r\n\t\t\telse\r\n\t\t\t\tname = toJvmRepresentation(arrayClass.getName());\r\n\t\t\tst.nextToken();\r\n\t\t\twhile (st.hasMoreTokens()) {\r\n\t\t\t\tst.nextToken();\r\n\t\t\t\tname = \"[\" + name;\r\n\t\t\t}\r\n\t\t} catch (NotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn name;\r\n\t}", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Transform an array class to its string representation <BR>\nexample: String[] -> [Ljava.lang.String;\n\n@param typeClass\nthe array class to transform\n@return the String representation of the class [SEP] public static MediaPacket make(MediaPacket packet, boolean copyData) {\n    long cPtr = VideoJNI.MediaPacket_make__SWIG_2(MediaPacket.getCPtr(packet), packet, copyData);\n    return (cPtr == 0) ? null : new MediaPacket(cPtr, false);\n  }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Persist instance on current HTTP session, bound to given managed instance key. This method simply uses\n<code>instanceKey</code> to add instance as HTTP session attribute. Both arguments should to be not null.\n<p>\nAccess to HTTP session is obtained from HTTP request; therefore, it is considered a bug if attempt to use this method\noutside a HTTP request thread.\n<p>\nImplementation note: this method could have side effect. It <b>creates the HTTP session</b> if there is none on current\nHTTP request.\n\n@param instanceKey managed instance key,\n@param instance managed instance.\n@throws BugError if attempt to use this method outside a HTTP request. [SEP] @Override\r\n\tpublic void persistInstance(InstanceKey instanceKey, Object instance) {\r\n\t\t// at this point key and instance arguments are guaranteed to be non null\r\n\r\n\t\tHttpSession httpSession = getSession(instanceKey);\r\n\t\thttpSession.setAttribute(instanceKey.getValue(), instance);\r\n\t}", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Persist instance on current HTTP session, bound to given managed instance key. This method simply uses\n<code>instanceKey</code> to add instance as HTTP session attribute. Both arguments should to be not null.\n<p>\nAccess to HTTP session is obtained from HTTP request; therefore, it is considered a bug if attempt to use this method\noutside a HTTP request thread.\n<p>\nImplementation note: this method could have side effect. It <b>creates the HTTP session</b> if there is none on current\nHTTP request.\n\n@param instanceKey managed instance key,\n@param instance managed instance.\n@throws BugError if attempt to use this method outside a HTTP request. [SEP] public static XMLEventWriter getXMLEventWriter(Result result) {\n        if (result instanceof StAXResult) {\n            return ((StAXResult) result).getXMLEventWriter();\n        } else if (result instanceof StaxResult) {\n            return ((StaxResult) result).getXMLEventWriter();\n        } else {\n            throw new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\n        }\n    }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Allocate a new packet wrapping the existing contents of<br>\na passed in packet.  Callers can then modify<br>\n#getPts(),<br>\n#getDts() and other get/set methods without<br>\nmodifying the original packet.<br>\n<br>\n@param packet Packet to reuse buffer from and to<br>\ncopy settings from.<br>\n@param copyData if true copy data from packet<br>\ninto our own buffer.  If false, share the same<br>\ndata buffer that packet uses<br>\n<br>\n@return a new packet or null on error. [SEP] public static MediaPacket make(MediaPacket packet, boolean copyData) {\n    long cPtr = VideoJNI.MediaPacket_make__SWIG_2(MediaPacket.getCPtr(packet), packet, copyData);\n    return (cPtr == 0) ? null : new MediaPacket(cPtr, false);\n  }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Allocate a new packet wrapping the existing contents of<br>\na passed in packet.  Callers can then modify<br>\n#getPts(),<br>\n#getDts() and other get/set methods without<br>\nmodifying the original packet.<br>\n<br>\n@param packet Packet to reuse buffer from and to<br>\ncopy settings from.<br>\n@param copyData if true copy data from packet<br>\ninto our own buffer.  If false, share the same<br>\ndata buffer that packet uses<br>\n<br>\n@return a new packet or null on error. [SEP] public static String toArray(CtClass typeClass) {\r\n\t\tStringTokenizer st = new StringTokenizer(typeClass.getName(), \"[\");\r\n\t\tString name = null;\r\n\t\tCtClass arrayClass;\r\n\t\ttry {\r\n\t\t\tarrayClass = typeClass.getComponentType();\r\n\t\t\tif (!arrayClass.isPrimitive())\r\n\t\t\t\tname = \"L\" + arrayClass.getName().replace('/', '.') + \";\";\r\n\t\t\telse\r\n\t\t\t\tname = toJvmRepresentation(arrayClass.getName());\r\n\t\t\tst.nextToken();\r\n\t\t\twhile (st.hasMoreTokens()) {\r\n\t\t\t\tst.nextToken();\r\n\t\t\t\tname = \"[\" + name;\r\n\t\t\t}\r\n\t\t} catch (NotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn name;\r\n\t}", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Allow users to search the default rc\n\n@param key\n@param url null => not url specific\n@return value corresponding to key+url, or null if does not exist [SEP] static synchronized public String\n  find(String key, String url) {\n    if (key == null) return null;\n    if (!initialized) RC.initialize();\n    Triple t = dfaltRC.lookup(key, url);\n    return (t == null ? null : t.value);\n  }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Allow users to search the default rc\n\n@param key\n@param url null => not url specific\n@return value corresponding to key+url, or null if does not exist [SEP] public static XMLEventWriter getXMLEventWriter(Result result) {\n        if (result instanceof StAXResult) {\n            return ((StAXResult) result).getXMLEventWriter();\n        } else if (result instanceof StaxResult) {\n            return ((StaxResult) result).getXMLEventWriter();\n        } else {\n            throw new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\n        }\n    }", "target": 0, "target_options": ["no_match", "match"]}
{"input": "Executes the command request and return the result back. [SEP] @Override\n  public final Object command(final OCommandRequestText iCommand) {\n    try {\n      while (true) {\n        try {\n          final OCommandExecutor executor = OCommandManager.instance().getExecutor(iCommand);\n\n          // COPY THE CONTEXT FROM THE REQUEST\n          executor.setContext(iCommand.getContext());\n\n          executor.setProgressListener(iCommand.getProgressListener());\n          executor.parse(iCommand);\n\n          return executeCommand(iCommand, executor);\n        } catch (final ORetryQueryException ignore) {\n\n          if (iCommand instanceof OQueryAbstract) {\n            final OQueryAbstract query = (OQueryAbstract) iCommand;\n            query.reset();\n          }\n\n        }\n      }\n    } catch (final RuntimeException ee) {\n      throw logAndPrepareForRethrow(ee);\n    } catch (final Error ee) {\n      throw logAndPrepareForRethrow(ee, false);\n    } catch (final Throwable t) {\n      throw logAndPrepareForRethrow(t);\n    }\n  }", "target": 1, "target_options": ["no_match", "match"]}
{"input": "Executes the command request and return the result back. [SEP] public NormalizedUserProfile getUserProfileInfo(AccessToken accessTokenParam)\n    {\n        if(accessTokenParam == null || (accessTokenParam.getAccessToken() == null ||\n                accessTokenParam.getAccessToken().trim().isEmpty()))\n        {\n            throw new FluidClientException(\n                    \"Code must be provided.\",\n                    FluidClientException.ErrorCode.FIELD_VALIDATE);\n        }\n\n        try {\n            String accessToken = accessTokenParam.getAccessToken();\n\n            List<HeaderNameValue> headerListing = new ArrayList<HeaderNameValue>();\n\n            headerListing.add(new HeaderNameValue(\n                    NormalizedUserProfile.HeaderMapping.AUTHORIZATION,\n                    \"Bearer \"+accessToken));\n\n            return new NormalizedUserProfile(\n                    this.getJson(true, WS.Path.Auth0.Version1.userInfo(),headerListing));\n        }\n        //\n        catch (UnsupportedEncodingException e) {\n\n            throw new FluidClientException(\n                    \"Unable to Encode (Not Supported). \"+ e.getMessage(),\n                    FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR);\n        }\n    }", "target": 0, "target_options": ["no_match", "match"]}
